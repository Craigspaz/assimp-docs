<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material" kind="struct" language="C++" prot="private">
    <compoundname>Assimp::AMFImporter::SPP_Material</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1a6786a8425e493174d2ce561021ffa7a2" prot="public" static="no" mutable="no">
        <type><ref refid="struct_a_m_f_color" kindref="compound">AMFColor</ref> *</type>
        <definition>AMFColor* Assimp::AMFImporter::SPP_Material::Color</definition>
        <argsstring></argsstring>
        <name>Color</name>
        <briefdescription>
<para>Color of material. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="115" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1ace539b8377d047bd0c61d86cdb1f5022" prot="public" static="no" mutable="no">
        <type>std::list&lt; SPP_Composite &gt;</type>
        <definition>std::list&lt;SPP_Composite&gt; Assimp::AMFImporter::SPP_Material::Composition</definition>
        <argsstring></argsstring>
        <name>Composition</name>
        <briefdescription>
<para>List of child materials if current material is composition of few another. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="116" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1a22bc40942c7966923beda4fa800a6f58" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Assimp::AMFImporter::SPP_Material::ID</definition>
        <argsstring></argsstring>
        <name>ID</name>
        <briefdescription>
<para>Material ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="113" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1a3e3b918b511590fa07fff5b3759eca18" prot="public" static="no" mutable="no">
        <type>std::list&lt; <ref refid="struct_a_m_f_metadata" kindref="compound">AMFMetadata</ref> * &gt;</type>
        <definition>std::list&lt;AMFMetadata *&gt; Assimp::AMFImporter::SPP_Material::Metadata</definition>
        <argsstring></argsstring>
        <name>Metadata</name>
        <briefdescription>
<para>Metadata of material. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="114" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1a1e9c693545b87ddb2b1bcc7af45a6ec4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="color4_8h_1a4badb8c19633de8f741ba2089ab79189" kindref="member">aiColor4D</ref></type>
        <definition>aiColor4D Assimp::AMFImporter::SPP_Material::GetColor</definition>
        <argsstring>(const float pX, const float pY, const float pZ) const</argsstring>
        <name>GetColor</name>
        <param>
          <type>const float</type>
          <declname>pX</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>pY</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>pZ</declname>
        </param>
        <briefdescription>
<para>Return color calculated for specified coordinate. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pX</parametername>
</parameternamelist>
<parameterdescription>
<para>- &quot;x&quot; coordinate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pY</parametername>
</parameternamelist>
<parameterdescription>
<para>- &quot;y&quot; coordinate. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pZ</parametername>
</parameternamelist>
<parameterdescription>
<para>- &quot;z&quot; coordinate. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>calculated color. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="123" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="64" bodyend="92"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Data type for post-processing step. </para>    </briefdescription>
    <detaileddescription>
<para>More suitable container for material. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="378">
        <label>AMFColor</label>
        <link refid="struct_a_m_f_color"/>
        <childnode refid="379" relation="public-inheritance">
        </childnode>
        <childnode refid="380" relation="usage">
          <edgelabel>Color</edgelabel>
        </childnode>
      </node>
      <node id="379">
        <label>AMFNodeElementBase</label>
        <link refid="class_a_m_f_node_element_base"/>
        <childnode refid="379" relation="usage">
          <edgelabel>Parent</edgelabel>
        </childnode>
      </node>
      <node id="380">
        <label>aiColor4t&lt; ai_real &gt;</label>
        <link refid="classai_color4t"/>
      </node>
      <node id="377">
        <label>Assimp::AMFImporter::SPP_Material</label>
        <childnode refid="378" relation="usage">
          <edgelabel>Color</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="code/AssetLib/AMF/AMFImporter.hpp" line="112" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="112" bodyend="124"/>
    <listofallmembers>
      <member refid="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1a6786a8425e493174d2ce561021ffa7a2" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter::SPP_Material</scope><name>Color</name></member>
      <member refid="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1ace539b8377d047bd0c61d86cdb1f5022" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter::SPP_Material</scope><name>Composition</name></member>
      <member refid="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1a1e9c693545b87ddb2b1bcc7af45a6ec4" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter::SPP_Material</scope><name>GetColor</name></member>
      <member refid="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1a22bc40942c7966923beda4fa800a6f58" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter::SPP_Material</scope><name>ID</name></member>
      <member refid="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material_1a3e3b918b511590fa07fff5b3759eca18" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter::SPP_Material</scope><name>Metadata</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
