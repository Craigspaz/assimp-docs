<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_assimp_1_1_t_xml_parser" kind="class" language="C++" prot="public">
    <compoundname>Assimp::TXmlParser</compoundname>
    <includes local="no">XmlParser.h</includes>
    <templateparamlist>
      <param>
        <type>class TNodeType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_assimp_1_1_t_xml_parser_1a716771d7bbbbceb3be5ff8fdfb53bb1e" prot="private" static="no" mutable="no">
        <type>TNodeType</type>
        <definition>TNodeType Assimp::TXmlParser&lt; TNodeType &gt;::mCurrent</definition>
        <argsstring></argsstring>
        <name>mCurrent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="368" column="15" bodyfile="include/assimp/XmlParser.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_assimp_1_1_t_xml_parser_1ad48ef1f75b49927f8b54b786f9351fd4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; char &gt;</type>
        <definition>std::vector&lt;char&gt; Assimp::TXmlParser&lt; TNodeType &gt;::mData</definition>
        <argsstring></argsstring>
        <name>mData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="369" column="17" bodyfile="include/assimp/XmlParser.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_assimp_1_1_t_xml_parser_1ac31d14f66d6c884e1f2ae92d2f2d1d1a" prot="private" static="no" mutable="no">
        <type>pugi::xml_document *</type>
        <definition>pugi::xml_document* Assimp::TXmlParser&lt; TNodeType &gt;::mDoc</definition>
        <argsstring></argsstring>
        <name>mDoc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="367" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a58de4b287ba8545b3e4fb7a060f48dd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::TXmlParser&lt; TNodeType &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Will clear the parsed xml-file. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="114" column="10" bodyfile="include/assimp/XmlParser.h" bodystart="114" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a6fc1466c28cf1985f224cd6c14f44dac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TNodeType *</type>
        <definition>TNodeType* Assimp::TXmlParser&lt; TNodeType &gt;::findNode</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>findNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Will search for a child-node by its name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The name of the child-node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The node instance or nullptr, if nothing was found. <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="127" column="15" bodyfile="include/assimp/XmlParser.h" bodystart="127" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a7b109e7c4a8cd457a7b7e83e5dbdba80" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>pugi::xml_document *</type>
        <definition>pugi::xml_document* Assimp::TXmlParser&lt; TNodeType &gt;::getDocument</definition>
        <argsstring>() const</argsstring>
        <name>getDocument</name>
        <briefdescription>
<para>Will return the document pointer, is nullptr if no xml-file was parsed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The pointer showing to the document. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="184" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a619611e6bed3bc865a63c81e54ff59c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>TNodeType</type>
        <definition>TNodeType Assimp::TXmlParser&lt; TNodeType &gt;::getRootNode</definition>
        <argsstring>()</argsstring>
        <name>getRootNode</name>
        <briefdescription>
<para>Will return the root node, non-const version. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The root node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="200" column="15" bodyfile="include/assimp/XmlParser.h" bodystart="200" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a4a7ce66b2bf437a40c5123cdca6632dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const TNodeType</type>
        <definition>const TNodeType Assimp::TXmlParser&lt; TNodeType &gt;::getRootNode</definition>
        <argsstring>() const</argsstring>
        <name>getRootNode</name>
        <briefdescription>
<para>Will return the root node, const version. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The root node. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="190" column="21" bodyfile="include/assimp/XmlParser.h" bodystart="190" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1aed2fce5401880ca824eb9a4530ec7c9a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Assimp::TXmlParser&lt; TNodeType &gt;::hasNode</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>hasNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Will return true, if the node is a child-node. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The name of the child node to look for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the node is a child-node or false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="148" column="10" bodyfile="include/assimp/XmlParser.h" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a2526e06cd264068515dcb39213a8bafb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Assimp::TXmlParser&lt; TNodeType &gt;::hasRoot</definition>
        <argsstring>() const</argsstring>
        <name>hasRoot</name>
        <briefdescription>
<para>Will return truem if a root node is there. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true in case of an existing root. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="179" column="10" bodyfile="include/assimp/XmlParser.h" bodystart="179" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a832c8f496948e43402767853d25b9a4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Assimp::TXmlParser&lt; TNodeType &gt;::parse</definition>
        <argsstring>(IOStream *stream)</argsstring>
        <name>parse</name>
        <param>
          <type><ref refid="class_assimp_1_1_i_o_stream" kindref="compound">IOStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Will parse an xml-file from a given stream. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the parsing was successful, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="155" column="10" bodyfile="include/assimp/XmlParser.h" bodystart="155" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a5af7c6b3f5e9ba39d7f5e026f1e71114" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Assimp::TXmlParser&lt; TNodeType &gt;::TXmlParser</definition>
        <argsstring>()</argsstring>
        <name>TXmlParser</name>
        <briefdescription>
<para>The default class constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="102" column="5" bodyfile="include/assimp/XmlParser.h" bodystart="102" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1aa9a04a2b248e686230f02d06e71ad2b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Assimp::TXmlParser&lt; TNodeType &gt;::~TXmlParser</definition>
        <argsstring>()</argsstring>
        <name>~TXmlParser</name>
        <briefdescription>
<para>The class destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="109" column="5" bodyfile="include/assimp/XmlParser.h" bodystart="109" bodyend="111"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1ad769335fbda1bfd3a38571a1de5484d8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::getBoolAttribute</definition>
        <argsstring>(XmlNode &amp;xmlNode, const char *name, bool &amp;val)</argsstring>
        <name>getBoolAttribute</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>xmlNode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Will try to get a bool attribute value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlNode</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The attribute name to look for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] The bool value from the attribute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the node contains an attribute with the given name and if the value is a bool. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="325" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="325" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a1f4abbe3f2c9a2cd63fd6be0000ef0a3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::getDoubleAttribute</definition>
        <argsstring>(XmlNode &amp;xmlNode, const char *name, double &amp;val)</argsstring>
        <name>getDoubleAttribute</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>xmlNode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Will try to get a double attribute value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlNode</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The attribute name to look for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] The double value from the attribute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the node contains an attribute with the given name and if the value is a double. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="295" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="295" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a3e61341db197be03f5481d15783e2e4b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::getFloatAttribute</definition>
        <argsstring>(XmlNode &amp;xmlNode, const char *name, float &amp;val)</argsstring>
        <name>getFloatAttribute</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>xmlNode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Will try to get a float attribute value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlNode</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The attribute name to look for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] The float value from the attribute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the node contains an attribute with the given name and if the value is a float. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="279" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="279" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1aa7dbfadf72ecaf4ea039132a22da20cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::getIntAttribute</definition>
        <argsstring>(XmlNode &amp;xmlNode, const char *name, int &amp;val)</argsstring>
        <name>getIntAttribute</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>xmlNode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Will try to get an int attribute value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlNode</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The attribute name to look for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] The int value from the attribute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the node contains an attribute with the given name and if the value is an int. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="246" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="246" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a97cc326e83ae5ac63dfbb40e8bdb874c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::getRealAttribute</definition>
        <argsstring>(XmlNode &amp;xmlNode, const char *name, ai_real &amp;val)</argsstring>
        <name>getRealAttribute</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>xmlNode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref> &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Will try to get a real attribute value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlNode</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The attribute name to look for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] The real value from the attribute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the node contains an attribute with the given name and if the value is a real. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="261" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="261" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a0c2062b621782a1b9fed1e2634bb5bd5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::getStdStrAttribute</definition>
        <argsstring>(XmlNode &amp;xmlNode, const char *name, std::string &amp;val)</argsstring>
        <name>getStdStrAttribute</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>xmlNode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Will try to get a std::string attribute value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlNode</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The attribute name to look for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] The std::string value from the attribute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the node contains an attribute with the given name and if the value is a std::string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="310" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="310" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a46db697bb5a1cae26cb501b1c95f4bb2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::getUIntAttribute</definition>
        <argsstring>(XmlNode &amp;xmlNode, const char *name, unsigned int &amp;val)</argsstring>
        <name>getUIntAttribute</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>xmlNode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>unsigned int &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Will try to get an unsigned int attribute value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlNode</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The attribute name to look for. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] The unsigned int value from the attribute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the node contains an attribute with the given name and if the value is an unsigned int. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="231" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="231" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a2ed72e48a1751284f616cb7ad07d35a1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::getValueAsFloat</definition>
        <argsstring>(XmlNode &amp;node, ai_real &amp;v)</argsstring>
        <name>getValueAsFloat</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Will try to get the value of the node as a float. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] The value as a float. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the value can be read out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="355" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="355" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1aad3430e94dfc04622063a4ba70f7c5a8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::getValueAsString</definition>
        <argsstring>(XmlNode &amp;node, std::string &amp;text)</argsstring>
        <name>getValueAsString</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Will try to get the value of the node as a string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] The value as a text. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the value can be read out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="340" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="340" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1a1f879e56c3e8d8da38b53fd7a27c5f7b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::hasAttribute</definition>
        <argsstring>(XmlNode &amp;xmlNode, const char *name)</argsstring>
        <name>hasAttribute</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>xmlNode</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Will check if an attribute is part of the XmlNode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xmlNode</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to search in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in} The attribute name to look for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if the was found, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="221" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="221" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_t_xml_parser_1af091b7f88836b555ff6f63adda6d0eeb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Assimp::TXmlParser&lt; TNodeType &gt;::hasNode</definition>
        <argsstring>(XmlNode &amp;node, const char *name)</argsstring>
        <name>hasNode</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Will check if a node with the given name is in. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The node to look in. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The name of the child-node. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true, if node was found, false if not. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/XmlParser.h" line="212" column="24" bodyfile="include/assimp/XmlParser.h" bodystart="212" bodyend="215"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The Xml-Parser class. </para>
    </briefdescription>
    <detaileddescription>
<para>Use this parser if you have to import any kind of xml-format.</para>
<para>An example: <programlisting><codeline><highlight class="normal">TXmlParser&lt;XmlNode&gt;<sp/>theParser;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(theParser.parse(fileStream))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>auto<sp/>node<sp/>=<sp/>theParser.getRootNode();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(<sp/>auto<sp/>currentNode<sp/>:<sp/>node.children())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>loop<sp/>over<sp/>all<sp/>children</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>TNodeType</parametername>
</parameternamelist>
<parameterdescription>
<para><linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="include/assimp/XmlParser.h" line="99" column="1" bodyfile="include/assimp/XmlParser.h" bodystart="99" bodyend="370"/>
    <listofallmembers>
      <member refid="class_assimp_1_1_t_xml_parser_1a58de4b287ba8545b3e4fb7a060f48dd1" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>clear</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a6fc1466c28cf1985f224cd6c14f44dac" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>findNode</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1ad769335fbda1bfd3a38571a1de5484d8" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getBoolAttribute</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a7b109e7c4a8cd457a7b7e83e5dbdba80" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getDocument</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a1f4abbe3f2c9a2cd63fd6be0000ef0a3" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getDoubleAttribute</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a3e61341db197be03f5481d15783e2e4b" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getFloatAttribute</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1aa7dbfadf72ecaf4ea039132a22da20cb" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getIntAttribute</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a97cc326e83ae5ac63dfbb40e8bdb874c" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getRealAttribute</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a4a7ce66b2bf437a40c5123cdca6632dd" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getRootNode</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a619611e6bed3bc865a63c81e54ff59c7" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getRootNode</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a0c2062b621782a1b9fed1e2634bb5bd5" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getStdStrAttribute</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a46db697bb5a1cae26cb501b1c95f4bb2" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getUIntAttribute</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a2ed72e48a1751284f616cb7ad07d35a1" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getValueAsFloat</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1aad3430e94dfc04622063a4ba70f7c5a8" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>getValueAsString</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a1f879e56c3e8d8da38b53fd7a27c5f7b" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>hasAttribute</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1aed2fce5401880ca824eb9a4530ec7c9a" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>hasNode</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1af091b7f88836b555ff6f63adda6d0eeb" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>hasNode</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a2526e06cd264068515dcb39213a8bafb" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>hasRoot</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a716771d7bbbbceb3be5ff8fdfb53bb1e" prot="private" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>mCurrent</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1ad48ef1f75b49927f8b54b786f9351fd4" prot="private" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>mData</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1ac31d14f66d6c884e1f2ae92d2f2d1d1a" prot="private" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>mDoc</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a832c8f496948e43402767853d25b9a4c" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>parse</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1a5af7c6b3f5e9ba39d7f5e026f1e71114" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>TXmlParser</name></member>
      <member refid="class_assimp_1_1_t_xml_parser_1aa9a04a2b248e686230f02d06e71ad2b9" prot="public" virt="non-virtual"><scope>Assimp::TXmlParser</scope><name>~TXmlParser</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
