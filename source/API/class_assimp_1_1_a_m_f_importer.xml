<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="class_assimp_1_1_a_m_f_importer" kind="class" language="C++" prot="public">
    <compoundname>Assimp::AMFImporter</compoundname>
    <basecompoundref refid="class_assimp_1_1_base_importer" prot="public" virt="non-virtual">Assimp::BaseImporter</basecompoundref>
    <includes local="no">AMFImporter.hpp</includes>
    <innerclass refid="struct_assimp_1_1_a_m_f_importer_1_1_s_complex_face" prot="private">Assimp::AMFImporter::SComplexFace</innerclass>
    <innerclass refid="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___composite" prot="private">Assimp::AMFImporter::SPP_Composite</innerclass>
    <innerclass refid="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___material" prot="private">Assimp::AMFImporter::SPP_Material</innerclass>
    <innerclass refid="struct_assimp_1_1_a_m_f_importer_1_1_s_p_p___texture" prot="private">Assimp::AMFImporter::SPP_Texture</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_assimp_1_1_a_m_f_importer_1a879168a4cc481955fb3c769ecc3dec86" prot="private" static="no">
        <type>std::vector&lt; <ref refid="struct_a_m_f_metadata" kindref="compound">AMFMetadata</ref> * &gt;</type>
        <definition>using Assimp::AMFImporter::AMFMetaDataArray =  std::vector&lt;AMFMetadata*&gt;</definition>
        <argsstring></argsstring>
        <name>AMFMetaDataArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="142" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_assimp_1_1_a_m_f_importer_1ac04a2e9feccd56ee71a812febac3d4ab" prot="private" static="no">
        <type>std::vector&lt; <ref refid="structai_mesh" kindref="compound">aiMesh</ref> * &gt;</type>
        <definition>using Assimp::AMFImporter::MeshArray =  std::vector&lt;aiMesh*&gt;</definition>
        <argsstring></argsstring>
        <name>MeshArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="143" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_assimp_1_1_a_m_f_importer_1a4211f7976525bf3ce722a4190d4dc0b0" prot="private" static="no">
        <type>std::vector&lt; <ref refid="structai_node" kindref="compound">aiNode</ref> * &gt;</type>
        <definition>using Assimp::AMFImporter::NodeArray =  std::vector&lt;aiNode*&gt;</definition>
        <argsstring></argsstring>
        <name>NodeArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="144" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="class_assimp_1_1_a_m_f_importer_1a0d7f6f7a8971bfcc30dc327daf8e03f5" prot="private" static="yes" mutable="no">
        <type>const <ref refid="structai_importer_desc" kindref="compound">aiImporterDesc</ref></type>
        <definition>const aiImporterDesc Assimp::AMFImporter::Description</definition>
        <argsstring></argsstring>
        <name>Description</name>
        <initializer>= {
    &quot;Additive manufacturing file <ref refid="namespace_assimp_1_1_formatter_1a6cf94459cb125ad767209c268d4bbcd4" kindref="member">format</ref>(AMF) <ref refid="class_assimp_1_1_importer" kindref="compound">Importer</ref>&quot;,
    &quot;smalcom&quot;,
    &quot;&quot;,
    &quot;See documentation in <ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref> code. Chapter: Limitations.&quot;,
    aiImporterFlags_SupportTextFlavour | <ref refid="importerdesc_8h_1a3c78e1208ecbd75fecdbb4e38d820449a6344b2d4487c5894e20cf06e807e127f" kindref="member">aiImporterFlags_LimitedSupport</ref> | <ref refid="importerdesc_8h_1a3c78e1208ecbd75fecdbb4e38d820449aff5af9356317719908b4dee9b50588f3" kindref="member">aiImporterFlags_Experimental</ref>,
    0,
    0,
    0,
    0,
    &quot;amf&quot;
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="298" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="298" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_assimp_1_1_a_m_f_importer_1ae11f52d00bc07e633983ffe7c1beea22" prot="private" static="no" mutable="no">
        <type>std::list&lt; SPP_Material &gt;</type>
        <definition>std::list&lt;SPP_Material&gt; Assimp::AMFImporter::mMaterial_Converted</definition>
        <argsstring></argsstring>
        <name>mMaterial_Converted</name>
        <briefdescription>
<para>List of converted materials for postprocessing step. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="305" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_assimp_1_1_a_m_f_importer_1aef7de0482677984a39d79dce565758a3" prot="private" static="no" mutable="no">
        <type><ref refid="class_a_m_f_node_element_base" kindref="compound">AMFNodeElementBase</ref> *</type>
        <definition>AMFNodeElementBase* Assimp::AMFImporter::mNodeElement_Cur</definition>
        <argsstring></argsstring>
        <name>mNodeElement_Cur</name>
        <briefdescription>
<para>Current element. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="300" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_assimp_1_1_a_m_f_importer_1aea60ab11c46fbfb41ae5d2da2769443b" prot="private" static="no" mutable="no">
        <type>std::list&lt; <ref refid="class_a_m_f_node_element_base" kindref="compound">AMFNodeElementBase</ref> * &gt;</type>
        <definition>std::list&lt;AMFNodeElementBase *&gt; Assimp::AMFImporter::mNodeElement_List</definition>
        <argsstring></argsstring>
        <name>mNodeElement_List</name>
        <briefdescription>
<para>All elements of scene graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="301" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_assimp_1_1_a_m_f_importer_1a21d9ceefd78646dad36a9cf6f7ed036f" prot="private" static="no" mutable="no">
        <type>std::list&lt; SPP_Texture &gt;</type>
        <definition>std::list&lt;SPP_Texture&gt; Assimp::AMFImporter::mTexture_Converted</definition>
        <argsstring></argsstring>
        <name>mTexture_Converted</name>
        <briefdescription>
<para>List of converted textures for postprocessing step. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="306" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_assimp_1_1_a_m_f_importer_1a328ba05ba9b5ed06ddaaf955464dc210" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Assimp::AMFImporter::mUnit</definition>
        <argsstring></argsstring>
        <name>mUnit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="303" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_assimp_1_1_a_m_f_importer_1a5e1c45f2ccb689ac83a49f465efbcc21" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string Assimp::AMFImporter::mVersion</definition>
        <argsstring></argsstring>
        <name>mVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="304" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_assimp_1_1_a_m_f_importer_1a7ba4b0a07092f973a8f9c1c10663d6f0" prot="private" static="no" mutable="no">
        <type><ref refid="namespace_assimp_1a6295df0173c66269feae004611f499a2" kindref="member">XmlParser</ref> *</type>
        <definition>XmlParser* Assimp::AMFImporter::mXmlParser</definition>
        <argsstring></argsstring>
        <name>mXmlParser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="302" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="302" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a9bf8b7916ee711a3b95377a7b54e87c2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clear all temporary data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="147" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="74" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a0d517d7b22911bf20087351922c0591c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseHelper_Decode_Base64</definition>
        <argsstring>(const std::string &amp;pInputBase64, std::vector&lt; uint8_t &gt; &amp;pOutputData) const</argsstring>
        <name>ParseHelper_Decode_Base64</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pInputBase64</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref> &gt; &amp;</type>
          <declname>pOutputData</declname>
        </param>
        <briefdescription>
<para>Decode Base64-encoded data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pInputBase64</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to input Base64-encoded string. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOutputData</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to output array for decoded data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="214" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="216" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1ab35ee340fccb7d16276be2304274e951" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Color</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Color</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;color&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="259" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Material.cpp" bodystart="67" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1ae5db3d6b246b2de883328d69ffc5b574" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Constellation</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Constellation</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;constellation&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="220" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="355" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1aecf2cf14c2da553bdd8e3cdf28e334e3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Coordinates</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Coordinates</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;coordinates&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="238" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Geometry.cpp" bodystart="167" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a4d552bef0fbbe6234d06390ff2e95ac5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Edge</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Edge</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;edge&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1aa07eec04215a6fed1829bc9bbaf227ca" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Instance</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Instance</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;instance&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="223" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="393" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a65c55ffe48adcc289902d42cb33ba36f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Material</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Material</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;material&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="226" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Material.cpp" bodystart="119" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1aeab93b17442c3146d70132dcfa0c1cab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Mesh</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Mesh</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;mesh&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="244" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Geometry.cpp" bodystart="61" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a1ab0396ba463b3d7dfcbd510ba8a855b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Metadata</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Metadata</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;metadata&gt; node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="229" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="495" bodyend="507"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a2e9add45929aa7a99e3583eec272f548" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Object</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Object</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;object&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="232" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="441" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1adc01c7480ccc3ab59d9cb67dba909b2e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Root</definition>
        <argsstring>()</argsstring>
        <name>ParseNode_Root</name>
        <briefdescription>
<para>Parse &lt;AMF&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="217" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="302" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a8aa096762f60c96296adaed3ee4ee5b1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_TexMap</definition>
        <argsstring>(XmlNode &amp;node, const bool pUseOldName=false)</argsstring>
        <name>ParseNode_TexMap</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>pUseOldName</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Parse &lt;texmap&gt; of &lt;map&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pUseOldName</parametername>
</parameternamelist>
<parameterdescription>
<para>- if true then use old name of node(and children) - &lt;map&gt;, instead of new name - &lt;texmap&gt;. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="263" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Material.cpp" bodystart="230" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a1debab9698977540e9f35a8a7412edb7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Texture</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Texture</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;texture&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="235" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Material.cpp" bodystart="160" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1acb2aab7a9126cbcbfc3b867038b1fb1d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Triangle</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Triangle</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;triangle&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="247" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Geometry.cpp" bodystart="251" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a232d82f420e1a621005a214d5b3bf36a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Vertex</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Vertex</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;vertex&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="250" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Geometry.cpp" bodystart="126" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a963b346b6913b895900f332278164f16" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Vertices</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Vertices</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;vertices&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="253" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Geometry.cpp" bodystart="100" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1ada4a3620a8189568cef22bd0bf0b2eb7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseNode_Volume</definition>
        <argsstring>(XmlNode &amp;node)</argsstring>
        <name>ParseNode_Volume</name>
        <param>
          <type><ref refid="namespace_assimp_1ad9aa76cdbe59a3c057f55760f3a02c0a" kindref="member">XmlNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Parse &lt;volume&gt; node of the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="256" column="1" bodyfile="code/AssetLib/AMF/AMFImporter_Geometry.cpp" bodystart="204" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a6abc1eb8eda4f3cbc1891a55c99d4062" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Postprocess_AddMetadata</definition>
        <argsstring>(const AMFMetaDataArray &amp;pMetadataList, aiNode &amp;pSceneNode) const</argsstring>
        <name>Postprocess_AddMetadata</name>
        <param>
          <type>const AMFMetaDataArray &amp;</type>
          <declname>pMetadataList</declname>
        </param>
        <param>
          <type><ref refid="structai_node" kindref="compound">aiNode</ref> &amp;</type>
          <declname>pSceneNode</declname>
        </param>
        <briefdescription>
<para>Check if child elements of node element is metadata and add it to scene node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pMetadataList</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to list with collected metadata. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pSceneNode</parametername>
</parameternamelist>
<parameterdescription>
<para>- scene node in which metadata will be added. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="177" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="352" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1aa20be498c328b4665a5abe0e4088b840" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Postprocess_BuildConstellation</definition>
        <argsstring>(AMFConstellation &amp;pConstellation, NodeArray &amp;nodeArray) const</argsstring>
        <name>Postprocess_BuildConstellation</name>
        <param>
          <type><ref refid="struct_a_m_f_constellation" kindref="compound">AMFConstellation</ref> &amp;</type>
          <declname>pConstellation</declname>
        </param>
        <param>
          <type>NodeArray &amp;</type>
          <declname>nodeArray</declname>
        </param>
        <briefdescription>
<para>Create and add to <ref refid="structai_node" kindref="compound">aiNode</ref>&apos;s list new part of scene graph defined by &lt;constellation&gt;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pConstellation</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to &lt;constellation&gt; node. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">nodeArray</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to <ref refid="structai_node" kindref="compound">aiNode</ref>&apos;s list. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="205" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="746" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1aaa7a0a22a7fad58a1704dbaba4c2b832" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Postprocess_BuildMaterial</definition>
        <argsstring>(const AMFMaterial &amp;pMaterial)</argsstring>
        <name>Postprocess_BuildMaterial</name>
        <param>
          <type>const <ref refid="struct_a_m_f_material" kindref="compound">AMFMaterial</ref> &amp;</type>
          <declname>pMaterial</declname>
        </param>
        <briefdescription>
<para>Convert material from <ref refid="struct_c_a_m_f_importer___node_element___material" kindref="compound">CAMFImporter_NodeElement_Material</ref> to SPP_Material. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pMaterial</parametername>
</parameternamelist>
<parameterdescription>
<para>- source <ref refid="struct_c_a_m_f_importer___node_element___material" kindref="compound">CAMFImporter_NodeElement_Material</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="200" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="725" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a1de9089c5c5b1d203706beea6bbd0bef" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Postprocess_BuildMeshSet</definition>
        <argsstring>(const AMFMesh &amp;pNodeElement, const std::vector&lt; aiVector3D &gt; &amp;pVertexCoordinateArray, const std::vector&lt; AMFColor *&gt; &amp;pVertexColorArray, const AMFColor *pObjectColor, MeshArray &amp;pMeshList, aiNode &amp;pSceneNode)</argsstring>
        <name>Postprocess_BuildMeshSet</name>
        <param>
          <type>const <ref refid="struct_a_m_f_mesh" kindref="compound">AMFMesh</ref> &amp;</type>
          <declname>pNodeElement</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> &gt; &amp;</type>
          <declname>pVertexCoordinateArray</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="struct_a_m_f_color" kindref="compound">AMFColor</ref> *&gt; &amp;</type>
          <declname>pVertexColorArray</declname>
        </param>
        <param>
          <type>const <ref refid="struct_a_m_f_color" kindref="compound">AMFColor</ref> *</type>
          <declname>pObjectColor</declname>
        </param>
        <param>
          <type>MeshArray &amp;</type>
          <declname>pMeshList</declname>
        </param>
        <param>
          <type><ref refid="structai_node" kindref="compound">aiNode</ref> &amp;</type>
          <declname>pSceneNode</declname>
        </param>
        <briefdescription>
<para>Create mesh for every &lt;volume&gt; in &lt;mesh&gt;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pNodeElement</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to node element which kept &lt;mesh&gt; data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pVertexCoordinateArray</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to vertices coordinates for all &lt;volume&gt;&apos;s. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pVertexColorArray</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to vertices colors for all &lt;volume&gt;&apos;s. If color for vertex is not set then corresponding member of array contain nullptr. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pObjectColor</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to colors for &lt;object&gt;. If color is not set then argument contain nullptr. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pMaterialList</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to a list with defined materials. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pMeshList</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to a list with all <ref refid="structai_mesh" kindref="compound">aiMesh</ref> of the scene. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pSceneNode</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to <ref refid="structai_node" kindref="compound">aiNode</ref> which will own new <ref refid="structai_mesh" kindref="compound">aiMesh</ref>&apos;s. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
<para>TODO: clean unused vertices. &quot;* 2&quot;: in certain cases - mesh full of triangle colors - vert_arr will contain duplicated vertices for colored triangles and initial vertices (for colored vertices) which in real became unused. This part need more thinking about optimisation.</para><para>TODO: clean unused vertices. &quot;* 2&quot;: in certain cases - mesh full of triangle colors - vert_arr will contain duplicated vertices for colored triangles and initial vertices (for colored vertices) which in real became unused. This part need more thinking about optimization. </para>        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="194" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="395" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a85a7b2af896f562a53b6aa3a56015d1d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Postprocess_BuildNodeAndObject</definition>
        <argsstring>(const AMFObject &amp;pNodeElement, MeshArray &amp;meshList, aiNode **pSceneNode)</argsstring>
        <name>Postprocess_BuildNodeAndObject</name>
        <param>
          <type>const <ref refid="struct_a_m_f_object" kindref="compound">AMFObject</ref> &amp;</type>
          <declname>pNodeElement</declname>
        </param>
        <param>
          <type>MeshArray &amp;</type>
          <declname>meshList</declname>
        </param>
        <param>
          <type><ref refid="structai_node" kindref="compound">aiNode</ref> **</type>
          <declname>pSceneNode</declname>
        </param>
        <briefdescription>
<para>To create <ref refid="structai_mesh" kindref="compound">aiMesh</ref> and <ref refid="structai_node" kindref="compound">aiNode</ref> for it from &lt;object&gt;. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pNodeElement</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to node element which kept &lt;object&gt; data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">meshList</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to a list with all <ref refid="structai_mesh" kindref="compound">aiMesh</ref> of the scene. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pSceneNode</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to place where new <ref refid="structai_node" kindref="compound">aiNode</ref> will be created. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="183" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="369" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a32158ec90fd685d0f7b4a816c49fe427" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Postprocess_BuildScene</definition>
        <argsstring>(aiScene *pScene)</argsstring>
        <name>Postprocess_BuildScene</name>
        <param>
          <type><ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
          <declname>pScene</declname>
        </param>
        <briefdescription>
<para>Build <ref refid="namespace_assimp" kindref="compound">Assimp</ref> scene graph in <ref refid="structai_scene" kindref="compound">aiScene</ref> from collected data. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pScene</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to <ref refid="structai_scene" kindref="compound">aiScene</ref> where tree will be built. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="209" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="802" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a939bc350f29460b8280131e8d5df149c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::PostprocessHelper_CreateMeshDataArray</definition>
        <argsstring>(const AMFMesh &amp;pNodeElement, std::vector&lt; aiVector3D &gt; &amp;pVertexCoordinateArray, std::vector&lt; AMFColor *&gt; &amp;pVertexColorArray) const</argsstring>
        <name>PostprocessHelper_CreateMeshDataArray</name>
        <param>
          <type>const <ref refid="struct_a_m_f_mesh" kindref="compound">AMFMesh</ref> &amp;</type>
          <declname>pNodeElement</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> &gt; &amp;</type>
          <declname>pVertexCoordinateArray</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="struct_a_m_f_color" kindref="compound">AMFColor</ref> *&gt; &amp;</type>
          <declname>pVertexColorArray</declname>
        </param>
        <briefdescription>
<para>Get data stored in &lt;vertices&gt; and place it to arrays. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pNodeElement</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to node element which kept &lt;object&gt; data. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pVertexCoordinateArray</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to vertices coordinates kept in &lt;vertices&gt;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pVertexColorArray</parametername>
</parameternamelist>
<parameterdescription>
<para>- reference to vertices colors for all &lt;vertex&apos;s. If color for vertex is not set then corresponding member of array contain nullptr. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="154" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="94" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1ab9891e1102887b77581ea1b6cd3bb374" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t Assimp::AMFImporter::PostprocessHelper_GetTextureID_Or_Create</definition>
        <argsstring>(const std::string &amp;pID_R, const std::string &amp;pID_G, const std::string &amp;pID_B, const std::string &amp;pID_A)</argsstring>
        <name>PostprocessHelper_GetTextureID_Or_Create</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pID_R</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pID_G</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pID_B</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pID_A</declname>
        </param>
        <briefdescription>
<para>Return converted texture ID which related to specified source textures ID&apos;s. </para>        </briefdescription>
        <detaileddescription>
<para>If converted texture does not exist then it will be created and ID on new converted texture will be returned. Conversion: set of textures from CAMFImporter_NodeElement_Texture to one SPP_Texture and place it to converted textures list. Any of source ID&apos;s can be absent(empty string) or even one ID only specified. But at least one ID must be specified. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pID_R</parametername>
</parameternamelist>
<parameterdescription>
<para>- ID of source &quot;red&quot; texture. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pID_G</parametername>
</parameternamelist>
<parameterdescription>
<para>- ID of source &quot;green&quot; texture. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pID_B</parametername>
</parameternamelist>
<parameterdescription>
<para>- ID of source &quot;blue&quot; texture. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pID_A</parametername>
</parameternamelist>
<parameterdescription>
<para>- ID of source &quot;alpha&quot; texture. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of the texture in array of the converted textures. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="166" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="143" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a435fadd3d6f5b78ff2ef9ee3d1914157" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::PostprocessHelper_SplitFacesByTextureID</definition>
        <argsstring>(std::list&lt; SComplexFace &gt; &amp;pInputList, std::list&lt; std::list&lt; SComplexFace &gt;&gt; &amp;pOutputList_Separated)</argsstring>
        <name>PostprocessHelper_SplitFacesByTextureID</name>
        <param>
          <type>std::list&lt; SComplexFace &gt; &amp;</type>
          <declname>pInputList</declname>
        </param>
        <param>
          <type>std::list&lt; std::list&lt; SComplexFace &gt;&gt; &amp;</type>
          <declname>pOutputList_Separated</declname>
        </param>
        <briefdescription>
<para>Separate input list by texture IDs. </para>        </briefdescription>
        <detaileddescription>
<para>This step is needed because <ref refid="structai_mesh" kindref="compound">aiMesh</ref> can contain mesh which is use only one texture (or set: diffuse, bump etc). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pInputList</parametername>
</parameternamelist>
<parameterdescription>
<para>- input list with faces. Some of them can contain color or texture mapping, or both of them, or nothing. Will be cleared after processing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pOutputList_Separated</parametername>
</parameternamelist>
<parameterdescription>
<para>- output list of the faces lists. Separated faces list by used texture IDs. Will be cleared before processing. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="172" column="1" bodyfile="code/AMF/AMFImporter_Postprocess.cpp" bodystart="307" bodyend="350"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a773ef728497dcfd14ae4df39304d3b3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Assimp::AMFImporter::AMFImporter</definition>
        <argsstring>() AI_NO_EXCEPT</argsstring>
        <name>AMFImporter</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="267" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="89" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a7029ced8aacd6661286e747d9f6c08fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Assimp::AMFImporter::AMFImporter</definition>
        <argsstring>(const AMFImporter &amp;pScene)=delete</argsstring>
        <name>AMFImporter</name>
        <param>
          <type>const <ref refid="class_assimp_1_1_a_m_f_importer" kindref="compound">AMFImporter</ref> &amp;</type>
          <declname>pScene</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="294" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a85a2e04a7d988def5ddc00c2f65532f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool Assimp::AMFImporter::CanRead</definition>
        <argsstring>(const std::string &amp;pFile, IOSystem *pIOHandler, bool pCheckSig) const</argsstring>
        <name>CanRead</name>
        <reimplements refid="class_assimp_1_1_base_importer_1a13588d3396ba5b7ed1f1cb46e0945cfd">CanRead</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type><ref refid="class_assimp_1_1_i_o_system" kindref="compound">IOSystem</ref> *</type>
          <declname>pIOHandler</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>checkSig</declname>
        </param>
        <briefdescription>
<para>Returns whether the class can handle the format of the given file. </para>        </briefdescription>
        <detaileddescription>
<para>The implementation should be as quick as possible. A check for the file extension is enough. If no suitable loader is found with this strategy, <ref refid="class_assimp_1_1_a_m_f_importer_1a85a2e04a7d988def5ddc00c2f65532f7" kindref="member">CanRead()</ref> is called again, the &apos;checkSig&apos; parameter set to true this time. Now the implementation is expected to perform a full check of the file structure, possibly searching the first bytes of the file for magic identifiers or keywords.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path and file name of the file to be examined. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pIOHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>The IO handler to use for accessing any file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>checkSig</parametername>
</parameternamelist>
<parameterdescription>
<para>Set to true if this method is called a second time. This time, the implementation may take more time to examine the contents of the file to be loaded for magic bytes, keywords, etc to be able to load files with unknown/not existent file extensions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the class can read this file, false if not. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="279" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="509" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a4f50ef50c8ce066cfa9c1034c2161948" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Assimp::AMFImporter::Find_ConvertedMaterial</definition>
        <argsstring>(const std::string &amp;pID, const SPP_Material **pConvertedMaterial) const</argsstring>
        <name>Find_ConvertedMaterial</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pID</declname>
        </param>
        <param>
          <type>const SPP_Material **</type>
          <declname>pConvertedMaterial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="285" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="138" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1af0fa072ffa46e867e23db2a9e2160daf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Assimp::AMFImporter::Find_ConvertedNode</definition>
        <argsstring>(const std::string &amp;pID, NodeArray &amp;nodeArray, aiNode **pNode) const</argsstring>
        <name>Find_ConvertedNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pID</declname>
        </param>
        <param>
          <type>NodeArray &amp;</type>
          <declname>nodeArray</declname>
        </param>
        <param>
          <type><ref refid="structai_node" kindref="compound">aiNode</ref> **</type>
          <declname>pNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="284" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="123" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a38726efa592db2c8fdc51f7b2cfd1bf0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Assimp::AMFImporter::Find_NodeElement</definition>
        <argsstring>(const std::string &amp;pID, const AMFNodeElementBase::EType pType, AMFNodeElementBase **pNodeElement) const</argsstring>
        <name>Find_NodeElement</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pID</declname>
        </param>
        <param>
          <type>const <ref refid="class_a_m_f_node_element_base_1a8461de95fe616786ef54db126007eb0a" kindref="member">AMFNodeElementBase::EType</ref></type>
          <declname>pType</declname>
        </param>
        <param>
          <type><ref refid="class_a_m_f_node_element_base" kindref="compound">AMFNodeElementBase</ref> **</type>
          <declname>pNodeElement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="283" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="109" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a925321c2c2fe2702854c1b1b86ad6639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::GetExtensionList</definition>
        <argsstring>(std::set&lt; std::string &gt; &amp;pExtensionList)</argsstring>
        <name>GetExtensionList</name>
        <param>
          <type>std::set&lt; std::string &gt; &amp;</type>
          <declname>pExtensionList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="280" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="524" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a11e10b5a345ab82b1f740e3a6f0ed575" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="structai_importer_desc" kindref="compound">aiImporterDesc</ref> *</type>
        <definition>const aiImporterDesc * Assimp::AMFImporter::GetInfo</definition>
        <argsstring>() const</argsstring>
        <name>GetInfo</name>
        <reimplements refid="class_assimp_1_1_base_importer_1a070b8c3f63767ad535c8ac509b725fc4">GetInfo</reimplements>
        <briefdescription>
<para>Called by #Importer::GetImporterInfo to get a description of some loader features. </para>        </briefdescription>
        <detaileddescription>
<para>Importers must provide this information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="282" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="528" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a3c0559661295085fc31d3c2b9f6a3eb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::InternReadFile</definition>
        <argsstring>(const std::string &amp;pFile, aiScene *pScene, IOSystem *pIOHandler)</argsstring>
        <name>InternReadFile</name>
        <reimplements refid="class_assimp_1_1_base_importer_1ac67d9f5ceb26353d27d6be06cccad398">InternReadFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type><ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
          <declname>pScene</declname>
        </param>
        <param>
          <type><ref refid="class_assimp_1_1_i_o_system" kindref="compound">IOSystem</ref> *</type>
          <declname>pIOHandler</declname>
        </param>
        <briefdescription>
<para>Imports the given file into the given scene structure. </para>        </briefdescription>
        <detaileddescription>
<para>The function is expected to throw an ImportErrorException if there is an error. If it terminates normally, the data in <ref refid="structai_scene" kindref="compound">aiScene</ref> is expected to be correct. Override this function to implement the actual importing. <linebreak/>
 The output scene must meet the following requirements:<linebreak/>
 <itemizedlist>
<listitem>
<para>At least a root node must be there, even if its only purpose is to reference one mesh. </para></listitem>
<listitem>
<para><ref refid="structai_mesh_1a99d66ac0a444068c1b252b30265cbf53" kindref="member">aiMesh::mPrimitiveTypes</ref> may be 0. The types of primitives in the mesh are determined automatically in this case. </para></listitem>
<listitem>
<para>the vertex data is stored in a pseudo-indexed &quot;verbose&quot; format. In fact this means that every vertex that is referenced by a face is unique. Or the other way round: a vertex index may not occur twice in a single <ref refid="structai_mesh" kindref="compound">aiMesh</ref>. </para></listitem>
<listitem>
<para><ref refid="structai_animation_1ae2bbc49320b4b75c05e23e0ab704ece7" kindref="member">aiAnimation::mDuration</ref> may be -1. <ref refid="namespace_assimp" kindref="compound">Assimp</ref> determines the length of the animation automatically in this case as the length of the longest animation channel. </para></listitem>
<listitem>
<para><ref refid="structai_mesh_1ab2a81bfe1731f01271ebab274a8f01c4" kindref="member">aiMesh::mBitangents</ref> may be nullptr if tangents and normals are given. In this case bitangents are computed as the cross product between normal and tangent. </para></listitem>
<listitem>
<para>There needn&apos;t be a material. If none is there a default material is generated. However, it is recommended practice for loaders to generate a default material for yourself that matches the default material setting for the file format better than <ref refid="namespace_assimp" kindref="compound">Assimp</ref>&apos;s generic default material. Note that default materials <emphasis>should</emphasis> be named AI_DEFAULT_MATERIAL_NAME if they&apos;re just color-shaded or AI_DEFAULT_TEXTURED_MATERIAL_NAME if they define a (dummy) texture.  </para></listitem>
</itemizedlist>
If the AI_SCENE_FLAGS_INCOMPLETE-Flag is <bold>not</bold> set:<itemizedlist>
<listitem>
<para>at least one mesh must be there </para></listitem>
<listitem>
<para>there may be no meshes with 0 vertices or faces </para></listitem>
</itemizedlist>
This won&apos;t be checked (except by the validation step): <ref refid="namespace_assimp" kindref="compound">Assimp</ref> will crash if one of the conditions is not met!</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the file to be imported. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pScene</parametername>
</parameternamelist>
<parameterdescription>
<para>The scene object to hold the imported data. nullptr is not a valid parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pIOHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>The IO handler to use for any file access. nullptr is not a valid parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="281" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="532" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1af2110829b40afb0f82039289217879c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_assimp_1_1_a_m_f_importer" kindref="compound">AMFImporter</ref> &amp;</type>
        <definition>AMFImporter&amp; Assimp::AMFImporter::operator=</definition>
        <argsstring>(const AMFImporter &amp;pScene)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_assimp_1_1_a_m_f_importer" kindref="compound">AMFImporter</ref> &amp;</type>
          <declname>pScene</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1ae2f19d53310ef5b54f5bdce46bbd098f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseFile</definition>
        <argsstring>(const std::string &amp;pFile, IOSystem *pIOHandler)</argsstring>
        <name>ParseFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type><ref refid="class_assimp_1_1_i_o_system" kindref="compound">IOSystem</ref> *</type>
          <declname>pIOHandler</declname>
        </param>
        <briefdescription>
<para>Parse AMF file and fill scene graph. </para>        </briefdescription>
        <detaileddescription>
<para>The function has no return value. Result can be found by analyzing the generated graph. Also exception can be thrown if trouble will found. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>- name of file to be parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pIOHandler</parametername>
</parameternamelist>
<parameterdescription>
<para>- pointer to IO helper object. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="276" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="265" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a3082a3a110c6cf65d3c74b1977c037d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseHelper_FixTruncatedFloatString</definition>
        <argsstring>(const char *pInStr, std::string &amp;pOutString)</argsstring>
        <name>ParseHelper_FixTruncatedFloatString</name>
        <param>
          <type>const char *</type>
          <declname>pInStr</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>pOutString</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="293" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="190" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a0c14cbd0ddc699098a71e320588ae361" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseHelper_Node_Enter</definition>
        <argsstring>(AMFNodeElementBase *child)</argsstring>
        <name>ParseHelper_Node_Enter</name>
        <param>
          <type><ref refid="class_a_m_f_node_element_base" kindref="compound">AMFNodeElementBase</ref> *</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="277" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a297134f091bc15389459fe2bb31d46aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::ParseHelper_Node_Exit</definition>
        <argsstring>()</argsstring>
        <name>ParseHelper_Node_Exit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="278" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="291" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a94970abc42b694396afb300a45ffeb73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Throw_CloseNotFound</definition>
        <argsstring>(const std::string &amp;nodeName)</argsstring>
        <name>Throw_CloseNotFound</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="286" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a47c4f7d3bbc6de78b05aa851a96d209b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Throw_ID_NotFound</definition>
        <argsstring>(const std::string &amp;pID) const</argsstring>
        <name>Throw_ID_NotFound</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="290" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1abd0c2aa30037c715abc4b9f161bc0f97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Throw_IncorrectAttr</definition>
        <argsstring>(const std::string &amp;nodeName, const std::string &amp;pAttrName)</argsstring>
        <name>Throw_IncorrectAttr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pAttrName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="287" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a79bcbbc4cb2a41522eb51435e2b2da3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Throw_IncorrectAttrValue</definition>
        <argsstring>(const std::string &amp;nodeName, const std::string &amp;pAttrName)</argsstring>
        <name>Throw_IncorrectAttrValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pAttrName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="288" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a4a52e0c498a0e2fea1cdf31a08d8a7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::Throw_MoreThanOnceDefined</definition>
        <argsstring>(const std::string &amp;nodeName, const std::string &amp;pNodeType, const std::string &amp;pDescription)</argsstring>
        <name>Throw_MoreThanOnceDefined</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nodeName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pNodeType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pDescription</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="289" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a393394ef52250e7ce09ef77455192684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Assimp::AMFImporter::XML_CheckNode_MustHaveChildren</definition>
        <argsstring>(pugi::xml_node &amp;node)</argsstring>
        <name>XML_CheckNode_MustHaveChildren</name>
        <param>
          <type><ref refid="classpugi_1_1xml__node" kindref="compound">pugi::xml_node</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="291" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1a3c57be60be98d108cabd6a784cf9aae4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Assimp::AMFImporter::XML_SearchNode</definition>
        <argsstring>(const std::string &amp;nodeName)</argsstring>
        <name>XML_SearchNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>nodeName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="292" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_a_m_f_importer_1ae7f9a71e68764d6e3d5b151173cda420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Assimp::AMFImporter::~AMFImporter</definition>
        <argsstring>()</argsstring>
        <name>~AMFImporter</name>
        <briefdescription>
<para>Default destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="code/AssetLib/AMF/AMFImporter.hpp" line="270" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.cpp" bodystart="99" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that holding scene graph which include: geometry, metadata, materials etc. </para>    </briefdescription>
    <detaileddescription>
<para>Implementing features.</para><para>Limitations.</para><para><orderedlist>
<listitem><para>When for texture mapping used set of source textures (r, g, b, a) not only one then attribute &quot;tiled&quot; for all set will be true if it true in any of source textures. Example. Triangle use for texture mapping three textures. Two of them has &quot;tiled&quot; set to false and one - set to true. In scene all three textures will be tiled.</para></listitem></orderedlist>
</para><para>Unsupported features:<orderedlist>
<listitem><para>Node &lt;composite&gt;, formulas in &lt;composite&gt; and &lt;color&gt;. For implementing this feature can be used expression parser &quot;muParser&quot; like in project &quot;amf_tools&quot;.</para></listitem><listitem><para>Attribute &quot;profile&quot; in node &lt;color&gt;.</para></listitem><listitem><para>Curved geometry: &lt;edge&gt;, &lt;normal&gt; and children nodes of them.</para></listitem><listitem><para>Attributes: &quot;unit&quot; and &quot;version&quot; in &lt;amf&gt; read but do nothing.</para></listitem><listitem><para>&lt;metadata&gt; stored only for root node &lt;amf&gt;.</para></listitem><listitem><para>Color averaging of vertices for which &lt;triangle&gt;&apos;s set different colors.</para></listitem></orderedlist>
</para><para>Supported nodes: General: &lt;amf&gt;; &lt;constellation&gt;; &lt;instance&gt; and children &lt;deltax&gt;, &lt;deltay&gt;, &lt;deltaz&gt;, &lt;rx&gt;, &lt;ry&gt;, &lt;rz&gt;; &lt;metadata&gt;;</para><para>Geometry: &lt;object&gt;; &lt;mesh&gt;; &lt;vertices&gt;; &lt;vertex&gt;; &lt;coordinates&gt; and children &lt;x&gt;, &lt;y&gt;, &lt;z&gt;; &lt;volume&gt;; &lt;triangle&gt; and children &lt;v1&gt;, &lt;v2&gt;, &lt;v3&gt;;</para><para>Material: &lt;color&gt; and children &lt;r&gt;, &lt;g&gt;, <bold>, ; &lt;texture&gt;; &lt;material&gt;; two variants of texture coordinates: new - &lt;texmap&gt; and children &lt;utex1&gt;, &lt;utex2&gt;, &lt;utex3&gt;, &lt;vtex1&gt;, &lt;vtex2&gt;, &lt;vtex3&gt; old - &lt;map&gt; and children &lt;u1&gt;, &lt;u2&gt;, &lt;u3&gt;, &lt;v1&gt;, &lt;v2&gt;, &lt;v3&gt; </bold></para>    </detaileddescription>
    <inheritancegraph>
      <node id="361">
        <label>Assimp::AMFImporter</label>
        <link refid="class_assimp_1_1_a_m_f_importer"/>
        <childnode refid="362" relation="public-inheritance">
        </childnode>
      </node>
      <node id="362">
        <label>Assimp::BaseImporter</label>
        <link refid="class_assimp_1_1_base_importer"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="363">
        <label>Assimp::AMFImporter</label>
        <link refid="class_assimp_1_1_a_m_f_importer"/>
        <childnode refid="364" relation="public-inheritance">
        </childnode>
      </node>
      <node id="364">
        <label>Assimp::BaseImporter</label>
        <link refid="class_assimp_1_1_base_importer"/>
        <childnode refid="365" relation="usage">
          <edgelabel>m_progress</edgelabel>
        </childnode>
      </node>
      <node id="365">
        <label>Assimp::ProgressHandler</label>
        <link refid="class_assimp_1_1_progress_handler"/>
      </node>
    </collaborationgraph>
    <location file="code/AssetLib/AMF/AMFImporter.hpp" line="100" column="1" bodyfile="code/AssetLib/AMF/AMFImporter.hpp" bodystart="100" bodyend="307"/>
    <listofallmembers>
      <member refid="class_assimp_1_1_base_importer_1a9fe6b47937a7c897536cac1513b65eb7af10ad62259d2e54eff440019b345e309" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ALLOW_EMPTY</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a773ef728497dcfd14ae4df39304d3b3e" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>AMFImporter</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a7029ced8aacd6661286e747d9f6c08fd" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>AMFImporter</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a879168a4cc481955fb3c769ecc3dec86" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>AMFMetaDataArray</name></member>
      <member refid="class_assimp_1_1_base_importer_1a15fb4512ad41a241a3b8de3fa63c0434" prot="protected" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>applicationUnits</name></member>
      <member refid="class_assimp_1_1_base_importer_1a3a26428f61d7bebdc477c4d0add9da30" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>BaseImporter</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a85a2e04a7d988def5ddc00c2f65532f7" prot="public" virt="virtual"><scope>Assimp::AMFImporter</scope><name>CanRead</name></member>
      <member refid="class_assimp_1_1_base_importer_1a32623af462fcf73fd3c665ca4d866d0f" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>CheckMagicToken</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a9bf8b7916ee711a3b95377a7b54e87c2" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Clear</name></member>
      <member refid="class_assimp_1_1_base_importer_1a6b225ea9aa92433ec03cb41492a0d451af5fe8cb0ad373c368ac0d87e9141a833" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>CM</name></member>
      <member refid="class_assimp_1_1_base_importer_1a3cd8c81533de987dd7acea6874ad918c" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ConvertToUTF8</name></member>
      <member refid="class_assimp_1_1_base_importer_1ad9a7c9788930c44aa40c7448d61a862d" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ConvertUTF8toISO8859_1</name></member>
      <member refid="class_assimp_1_1_base_importer_1abc1067a6780d7d6dbe457fef8abdb66a" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>CopyVector</name></member>
      <member refid="class_assimp_1_1_base_importer_1a3ce01553ca65d8cc8f1efc2174845d67" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>CopyVector</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a0d7f6f7a8971bfcc30dc327daf8e03f5" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Description</name></member>
      <member refid="class_assimp_1_1_base_importer_1a6b225ea9aa92433ec03cb41492a0d451ae90aa4e961f527f988365ee77d476118" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>FEET</name></member>
      <member refid="class_assimp_1_1_base_importer_1af85971f80c5f45fef8c3a3395e4bbe14" prot="protected" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>fileScale</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a4f50ef50c8ce066cfa9c1034c2161948" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Find_ConvertedMaterial</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1af0fa072ffa46e867e23db2a9e2160daf" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Find_ConvertedNode</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a38726efa592db2c8fdc51f7b2cfd1bf0" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Find_NodeElement</name></member>
      <member refid="class_assimp_1_1_base_importer_1a9fe6b47937a7c897536cac1513b65eb7ae507341521279743797bdce9f7a21081" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>FORBID_EMPTY</name></member>
      <member refid="class_assimp_1_1_base_importer_1a51876206d286fb5804a2e99ad1fcae12" prot="public" virt="virtual"><scope>Assimp::AMFImporter</scope><name>GetApplicationUnits</name></member>
      <member refid="class_assimp_1_1_base_importer_1a15c379ec3a8399551d7b379de7fc3bc1" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>GetErrorText</name></member>
      <member refid="class_assimp_1_1_base_importer_1a05f9397b157ff1b56d7d360a39ca41ac" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>GetException</name></member>
      <member refid="class_assimp_1_1_base_importer_1a3954284d75f9fe30f5ff1758ecd2faeb" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>GetExtension</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a925321c2c2fe2702854c1b1b86ad6639" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>GetExtensionList</name></member>
      <member refid="class_assimp_1_1_base_importer_1a21e52bc7b3d7833000737018a8301efc" prot="public" virt="virtual"><scope>Assimp::AMFImporter</scope><name>GetFileScale</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a11e10b5a345ab82b1f740e3a6f0ed575" prot="public" virt="virtual"><scope>Assimp::AMFImporter</scope><name>GetInfo</name></member>
      <member refid="class_assimp_1_1_base_importer_1ad5bb9d0bff964c79b625c754b3adb04c" prot="protected" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>importerScale</name></member>
      <member refid="class_assimp_1_1_base_importer_1a6b225ea9aa92433ec03cb41492a0d451" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ImporterUnits</name></member>
      <member refid="class_assimp_1_1_base_importer_1ac43f3495d597a22da47ea894f5432016" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>importerUnits</name></member>
      <member refid="class_assimp_1_1_base_importer_1a6b225ea9aa92433ec03cb41492a0d451ace3a659f5caad10cf4ac6f2de87d35c3" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>INCHES</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a3c0559661295085fc31d3c2b9f6a3eb9" prot="public" virt="virtual"><scope>Assimp::AMFImporter</scope><name>InternReadFile</name></member>
      <member refid="class_assimp_1_1_base_importer_1a6b225ea9aa92433ec03cb41492a0d451af84e338c6e9a678ed63b8b2b7de9ef02" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>M</name></member>
      <member refid="class_assimp_1_1_base_importer_1abd2c9b86479c0c165e5d84d733e53373" prot="protected" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>m_ErrorText</name></member>
      <member refid="class_assimp_1_1_base_importer_1a7bf84fb733992558272add378e7d9525" prot="protected" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>m_Exception</name></member>
      <member refid="class_assimp_1_1_base_importer_1aeb17ba9eee14fcdfe2c6f45bf940139d" prot="protected" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>m_progress</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1ac04a2e9feccd56ee71a812febac3d4ab" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>MeshArray</name></member>
      <member refid="class_assimp_1_1_base_importer_1a6b225ea9aa92433ec03cb41492a0d451a1633eb908b6889de4de75080bbf13229" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>MM</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1ae11f52d00bc07e633983ffe7c1beea22" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>mMaterial_Converted</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1aef7de0482677984a39d79dce565758a3" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>mNodeElement_Cur</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1aea60ab11c46fbfb41ae5d2da2769443b" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>mNodeElement_List</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a21d9ceefd78646dad36a9cf6f7ed036f" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>mTexture_Converted</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a328ba05ba9b5ed06ddaaf955464dc210" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>mUnit</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a5e1c45f2ccb689ac83a49f465efbcc21" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>mVersion</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a7ba4b0a07092f973a8f9c1c10663d6f0" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>mXmlParser</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a4211f7976525bf3ce722a4190d4dc0b0" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>NodeArray</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1af2110829b40afb0f82039289217879c1" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>operator=</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1ae2f19d53310ef5b54f5bdce46bbd098f" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseFile</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a0d517d7b22911bf20087351922c0591c" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseHelper_Decode_Base64</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a3082a3a110c6cf65d3c74b1977c037d5" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseHelper_FixTruncatedFloatString</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a0c14cbd0ddc699098a71e320588ae361" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseHelper_Node_Enter</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a297134f091bc15389459fe2bb31d46aa" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseHelper_Node_Exit</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1ab35ee340fccb7d16276be2304274e951" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Color</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1ae5db3d6b246b2de883328d69ffc5b574" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Constellation</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1aecf2cf14c2da553bdd8e3cdf28e334e3" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Coordinates</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a4d552bef0fbbe6234d06390ff2e95ac5" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Edge</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1aa07eec04215a6fed1829bc9bbaf227ca" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Instance</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a65c55ffe48adcc289902d42cb33ba36f" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Material</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1aeab93b17442c3146d70132dcfa0c1cab" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Mesh</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a1ab0396ba463b3d7dfcbd510ba8a855b" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Metadata</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a2e9add45929aa7a99e3583eec272f548" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Object</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1adc01c7480ccc3ab59d9cb67dba909b2e" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Root</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a8aa096762f60c96296adaed3ee4ee5b1" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_TexMap</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a1debab9698977540e9f35a8a7412edb7" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Texture</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1acb2aab7a9126cbcbfc3b867038b1fb1d" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Triangle</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a232d82f420e1a621005a214d5b3bf36a" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Vertex</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a963b346b6913b895900f332278164f16" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Vertices</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1ada4a3620a8189568cef22bd0bf0b2eb7" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ParseNode_Volume</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a6abc1eb8eda4f3cbc1891a55c99d4062" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Postprocess_AddMetadata</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1aa20be498c328b4665a5abe0e4088b840" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Postprocess_BuildConstellation</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1aaa7a0a22a7fad58a1704dbaba4c2b832" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Postprocess_BuildMaterial</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a1de9089c5c5b1d203706beea6bbd0bef" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Postprocess_BuildMeshSet</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a85a7b2af896f562a53b6aa3a56015d1d" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Postprocess_BuildNodeAndObject</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a32158ec90fd685d0f7b4a816c49fe427" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Postprocess_BuildScene</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a939bc350f29460b8280131e8d5df149c" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>PostprocessHelper_CreateMeshDataArray</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1ab9891e1102887b77581ea1b6cd3bb374" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>PostprocessHelper_GetTextureID_Or_Create</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a435fadd3d6f5b78ff2ef9ee3d1914157" prot="private" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>PostprocessHelper_SplitFacesByTextureID</name></member>
      <member refid="class_assimp_1_1_base_importer_1a047f06945fa656ebedde67819945b28c" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>ReadFile</name></member>
      <member refid="class_assimp_1_1_base_importer_1a6caed29cb9fa2d1e0aa0da2a17851ca2" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>SearchFileHeaderForToken</name></member>
      <member refid="class_assimp_1_1_base_importer_1a9c5e10c82316e3afd685732e8f734f87" prot="public" virt="virtual"><scope>Assimp::AMFImporter</scope><name>SetApplicationUnits</name></member>
      <member refid="class_assimp_1_1_base_importer_1a8faf1d4f1475e98f96f95fa46aad44c1" prot="public" virt="virtual"><scope>Assimp::AMFImporter</scope><name>SetFileScale</name></member>
      <member refid="class_assimp_1_1_base_importer_1a2ecaa6b808b2b282cb6aa321970a2ad3" prot="public" virt="virtual"><scope>Assimp::AMFImporter</scope><name>SetupProperties</name></member>
      <member refid="class_assimp_1_1_base_importer_1a2de9d21d35c9060480142dc536ce5352" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>SimpleExtensionCheck</name></member>
      <member refid="class_assimp_1_1_base_importer_1a9fe6b47937a7c897536cac1513b65eb7" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>TextFileMode</name></member>
      <member refid="class_assimp_1_1_base_importer_1a1c43dc005eb52d2902d13f1a475ec9cd" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>TextFileToBuffer</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a94970abc42b694396afb300a45ffeb73" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Throw_CloseNotFound</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a47c4f7d3bbc6de78b05aa851a96d209b" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Throw_ID_NotFound</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1abd0c2aa30037c715abc4b9f161bc0f97" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Throw_IncorrectAttr</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a79bcbbc4cb2a41522eb51435e2b2da3b" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Throw_IncorrectAttrValue</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a4a52e0c498a0e2fea1cdf31a08d8a7d1" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>Throw_MoreThanOnceDefined</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a393394ef52250e7ce09ef77455192684" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>XML_CheckNode_MustHaveChildren</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1a3c57be60be98d108cabd6a784cf9aae4" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>XML_SearchNode</name></member>
      <member refid="class_assimp_1_1_a_m_f_importer_1ae7f9a71e68764d6e3d5b151173cda420" prot="public" virt="non-virtual"><scope>Assimp::AMFImporter</scope><name>~AMFImporter</name></member>
      <member refid="class_assimp_1_1_base_importer_1a809ce474153402b8fc8c5a1add89a855" prot="public" virt="virtual"><scope>Assimp::AMFImporter</scope><name>~BaseImporter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
