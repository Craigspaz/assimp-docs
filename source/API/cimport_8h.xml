<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="cimport_8h" kind="file" language="C++">
    <compoundname>cimport.h</compoundname>
    <includes refid="importerdesc_8h" local="no">assimp/importerdesc.h</includes>
    <includes refid="types_8h" local="no">assimp/types.h</includes>
    <incdepgraph>
      <node id="16">
        <label>assimp/matrix4x4.h</label>
        <link refid="matrix4x4_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>assimp/vector3.h</label>
        <link refid="vector3_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>assimp/importerdesc.h</label>
        <link refid="importerdesc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>assimp/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cmath</label>
      </node>
      <node id="15">
        <label>assimp/matrix3x3.h</label>
        <link refid="matrix3x3_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>string</label>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="10">
        <label>assimp/config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="4">
        <label>limits.h</label>
      </node>
      <node id="8">
        <label>sys/types.h</label>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="17">
        <label>assimp/quaternion.h</label>
        <link refid="quaternion_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>assimp/defs.h</label>
        <link refid="defs_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>new</label>
      </node>
      <node id="1">
        <label>cimport.h</label>
        <link refid="cimport_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>assimp/color4.h</label>
        <link refid="color4_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>assimp/vector2.h</label>
        <link refid="vector2_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <innerclass refid="structai_log_stream" prot="public">aiLogStream</innerclass>
    <innerclass refid="structai_property_store" prot="public">aiPropertyStore</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="cimport_8h_1a6f2221d62659a3d47b96a871afc7855e" prot="public" static="no">
        <name>AI_ASSIMP_H_INC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="47" column="9" bodyfile="include/assimp/cimport.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cimport_8h_1a39bd8dc9e68cf3d9238e0e2ad7cd0138" prot="public" static="no">
        <name>AI_FALSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="98" column="9" bodyfile="include/assimp/cimport.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="cimport_8h_1a6b4fb3c6aa04e2e3b45a7fbd9f9f9d19" prot="public" static="no">
        <name>AI_TRUE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="99" column="9" bodyfile="include/assimp/cimport.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cimport_8h_1aaf9b3b6ed742722b3d0bbff0f4621691" prot="public" static="no">
        <type>int</type>
        <definition>typedef int aiBool</definition>
        <argsstring></argsstring>
        <name>aiBool</name>
        <briefdescription>
<para>Our own C boolean type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="96" column="13" bodyfile="include/assimp/cimport.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="cimport_8h_1a8de903c645dbd8b4f4446c62afa4101b" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* aiLogStreamCallback) (const char *, char *)</definition>
        <argsstring>)(const char *, char *)</argsstring>
        <name>aiLogStreamCallback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="63" column="9" bodyfile="include/assimp/cimport.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cimport_8h_1af399cb7002e348f6b9228cff3f836c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
        <definition>ASSIMP_API const C_STRUCT aiScene* aiApplyPostProcessing</definition>
        <argsstring>(const C_STRUCT aiScene *pScene, unsigned int pFlags)</argsstring>
        <name>aiApplyPostProcessing</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
          <declname>pScene</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pFlags</declname>
        </param>
        <briefdescription>
<para>Apply post-processing to an already-imported scene. </para>
        </briefdescription>
        <detaileddescription>
<para>This is strictly equivalent to calling <ref refid="cimport_8h_1a37baf75d55599334097f7337ce8f25c5" kindref="member">aiImportFile()</ref>/<ref refid="cimport_8h_1a60c8f08f9daa728b5e2d20623e81cd13" kindref="member">aiImportFileEx</ref> with the same flags. However, you can use this separate function to inspect the imported scene first to fine-tune your post-processing setup. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pScene</parametername>
</parameternamelist>
<parameterdescription>
<para>Scene to work on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Provide a bitwise combination of the <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410" kindref="member">aiPostProcessSteps</ref> flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the post-processed data. Post processing is done in-place, meaning this is still the same <ref refid="structai_scene" kindref="compound">aiScene</ref> which you passed for pScene. However, <emphasis>if</emphasis> post-processing failed, the scene could now be NULL. That&apos;s quite a rare case, post processing steps are not really designed to &apos;fail&apos;. To be exact, the <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410ae420ce22fbbac9d0fd21fd92f2b630fa" kindref="member">aiProcess_ValidateDataStructure</ref> flag is currently the only post processing step which can actually cause the scene to be reset to NULL. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="256" column="35" declfile="include/assimp/cimport.h" declline="256" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a75c5aa6027cb059e63b3dda005c9c149" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiAttachLogStream</definition>
        <argsstring>(const C_STRUCT aiLogStream *stream)</argsstring>
        <name>aiAttachLogStream</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_log_stream" kindref="compound">aiLogStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Attach a custom log stream to the libraries&apos; logging system. </para>
        </briefdescription>
        <detaileddescription>
<para>Attaching a log stream can slightly reduce <ref refid="namespace_assimp" kindref="compound">Assimp</ref>&apos;s overall import performance. Multiple log-streams can be attached. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>Describes the new log stream. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>To ensure proper destruction of the logging system, you need to manually call <ref refid="cimport_8h_1a98ad05bb95e8f8157a97c133812a1597" kindref="member">aiDetachLogStream()</ref> on every single log stream you attach. Alternatively (for the lazy folks) <ref refid="cimport_8h_1a8f1fe2e8ccc5f93484098114ae7071bf" kindref="member">aiDetachAllLogStreams</ref> is provided. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="294" column="17" declfile="include/assimp/cimport.h" declline="294" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a523d3d8b510203fb1a80d8702283f8c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> *</type>
        <definition>ASSIMP_API C_STRUCT aiPropertyStore* aiCreatePropertyStore</definition>
        <argsstring>(void)</argsstring>
        <name>aiCreatePropertyStore</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Create an empty property store. </para>
        </briefdescription>
        <detaileddescription>
<para>Property stores are used to collect import settings. <simplesect kind="return"><para>New property store. Property stores need to be manually destroyed using the <ref refid="cimport_8h_1a579dddd75dbba5621c235df780ffc3e6" kindref="member">aiReleasePropertyStore</ref> API function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="382" column="37" declfile="include/assimp/cimport.h" declline="382" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a6fa70de0a410d942b75102d605d700f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiCreateQuaternionFromMatrix</definition>
        <argsstring>(C_STRUCT aiQuaternion *quat, const C_STRUCT aiMatrix3x3 *mat)</argsstring>
        <name>aiCreateQuaternionFromMatrix</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>quat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Construct a quaternion from a 3x3 rotation matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>quat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output quaternion. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to &apos;quaternionize&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para>aiQuaternion(const aiMatrix3x3&amp; pRotMatrix) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="464" column="17" declfile="include/assimp/cimport.h" declline="464" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a59f68c25251aefbd560582cfe39b9287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiDecomposeMatrix</definition>
        <argsstring>(const C_STRUCT aiMatrix4x4 *mat, C_STRUCT aiVector3D *scaling, C_STRUCT aiQuaternion *rotation, C_STRUCT aiVector3D *position)</argsstring>
        <name>aiDecomposeMatrix</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Decompose a transformation matrix into its rotational, translational and scaling components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to decompose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the scaling component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the rotational component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the translational component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="classai_matrix4x4t_1a2aa8546c78e6efb21931c437a3fd3604" kindref="member">aiMatrix4x4::Decompose</ref> (<ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref>&amp;, <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref>&amp;, <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref>&amp;) const; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="478" column="17" declfile="include/assimp/cimport.h" declline="478" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a8f1fe2e8ccc5f93484098114ae7071bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiDetachAllLogStreams</definition>
        <argsstring>(void)</argsstring>
        <name>aiDetachAllLogStreams</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Detach all active log streams from the libraries&apos; logging system. </para>
        </briefdescription>
        <detaileddescription>
<para>This ensures that the logging system is terminated properly and all resources allocated by it are actually freed. If you attached a stream, don&apos;t forget to detach it again. <simplesect kind="see"><para><ref refid="cimport_8h_1a75c5aa6027cb059e63b3dda005c9c149" kindref="member">aiAttachLogStream</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="cimport_8h_1a98ad05bb95e8f8157a97c133812a1597" kindref="member">aiDetachLogStream</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="326" column="17" declfile="include/assimp/cimport.h" declline="326" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a98ad05bb95e8f8157a97c133812a1597" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> <ref refid="defs_8h_1aa8c1788fd9d096036c9e3b6cfe4b1301" kindref="member">C_ENUM</ref> <ref refid="types_8h_1a1f78dfb65090aa930cabb984c8abe711" kindref="member">aiReturn</ref></type>
        <definition>ASSIMP_API C_ENUM aiReturn aiDetachLogStream</definition>
        <argsstring>(const C_STRUCT aiLogStream *stream)</argsstring>
        <name>aiDetachLogStream</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_log_stream" kindref="compound">aiLogStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Detach a custom log stream from the libraries&apos; logging system. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the counterpart of <ref refid="cimport_8h_1a75c5aa6027cb059e63b3dda005c9c149" kindref="member">aiAttachLogStream</ref>. If you attached a stream, don&apos;t forget to detach it again. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The log stream to be detached. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>AI_SUCCESS if the log stream has been detached successfully. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="cimport_8h_1a8f1fe2e8ccc5f93484098114ae7071bf" kindref="member">aiDetachAllLogStreams</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="315" column="28" declfile="include/assimp/cimport.h" declline="315" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a54a7485c9422348b2f20adcbd192ed64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiEnableVerboseLogging</definition>
        <argsstring>(aiBool d)</argsstring>
        <name>aiEnableVerboseLogging</name>
        <param>
          <type><ref refid="cimport_8h_1aaf9b3b6ed742722b3d0bbff0f4621691" kindref="member">aiBool</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Enable verbose logging. </para>
        </briefdescription>
        <detaileddescription>
<para>Verbose logging includes debug-related stuff and detailed import statistics. This can have severe impact on import performance and memory consumption. However, it might be useful to find out why a file didn&apos;t read correctly. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>AI_TRUE or AI_FALSE, your decision. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="304" column="17" declfile="include/assimp/cimport.h" declline="304" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a74c227c3ee707049a1295356f4c0af0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> const char *</type>
        <definition>ASSIMP_API const char* aiGetErrorString</definition>
        <argsstring>(void)</argsstring>
        <name>aiGetErrorString</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the error text of the last failed import process. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A textual description of the error that occurred at the last import process. NULL if there was no error. There can&apos;t be an error if you got a non-NULL <ref refid="structai_scene" kindref="compound">aiScene</ref> from <ref refid="cimport_8h_1a37baf75d55599334097f7337ce8f25c5" kindref="member">aiImportFile</ref>/<ref refid="cimport_8h_1a60c8f08f9daa728b5e2d20623e81cd13" kindref="member">aiImportFileEx</ref>/<ref refid="cimport_8h_1af399cb7002e348f6b9228cff3f836c6c" kindref="member">aiApplyPostProcessing</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="344" column="23" declfile="include/assimp/cimport.h" declline="344" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a99cec86f7950963c0c9ecda87a2e07e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiGetExtensionList</definition>
        <argsstring>(C_STRUCT aiString *szOut)</argsstring>
        <name>aiGetExtensionList</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_string" kindref="compound">aiString</ref> *</type>
          <declname>szOut</declname>
        </param>
        <briefdescription>
<para>Get a list of all file extensions supported by ASSIMP. </para>
        </briefdescription>
        <detaileddescription>
<para>If a file extension is contained in the list this does, of course, not mean that ASSIMP is able to load all files with this extension. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>szOut</parametername>
</parameternamelist>
<parameterdescription>
<para>String to receive the extension list. Format of the list: &quot;*.3ds;*.obj;*.dae&quot;. NULL is not a valid parameter. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="364" column="17" declfile="include/assimp/cimport.h" declline="364" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a0052bf974030e06a5f6b2a4c5d2c5d0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> size_t</type>
        <definition>ASSIMP_API size_t aiGetImportFormatCount</definition>
        <argsstring>(void)</argsstring>
        <name>aiGetImportFormatCount</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the number of import file formats available in the current <ref refid="namespace_assimp" kindref="compound">Assimp</ref> build. </para>
        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="cimport_8h_1aa80b5c006315b73e693feb2ec27ecf34" kindref="member">aiGetImportFormatDescription()</ref> to retrieve infos of a specific import format. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="552" column="19" declfile="include/assimp/cimport.h" declline="552" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1aa80b5c006315b73e693feb2ec27ecf34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_importer_desc" kindref="compound">aiImporterDesc</ref> *</type>
        <definition>ASSIMP_API const C_STRUCT aiImporterDesc* aiGetImportFormatDescription</definition>
        <argsstring>(size_t pIndex)</argsstring>
        <name>aiGetImportFormatDescription</name>
        <param>
          <type>size_t</type>
          <declname>pIndex</declname>
        </param>
        <briefdescription>
<para>Returns a description of the nth import file format. </para>
        </briefdescription>
        <detaileddescription>
<para>Use <ref refid="cimport_8h_1a0052bf974030e06a5f6b2a4c5d2c5d0d" kindref="member">aiGetImportFormatCount()</ref> to learn how many import formats are supported. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the import format to retrieve information for. Valid range is 0 to <ref refid="cimport_8h_1a0052bf974030e06a5f6b2a4c5d2c5d0d" kindref="member">aiGetImportFormatCount()</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A description of that specific import format. NULL if pIndex is out of range. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="561" column="42" declfile="include/assimp/cimport.h" declline="561" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1acf5b67b3700dc01b5f847ad077895e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiGetMemoryRequirements</definition>
        <argsstring>(const C_STRUCT aiScene *pIn, C_STRUCT aiMemoryInfo *in)</argsstring>
        <name>aiGetMemoryRequirements</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
          <declname>pIn</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_memory_info" kindref="compound">aiMemoryInfo</ref> *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Get the approximated storage required by an imported asset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pIn</parametername>
</parameternamelist>
<parameterdescription>
<para>Input asset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure to be filled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="372" column="17" declfile="include/assimp/cimport.h" declline="372" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ad7e375d7b134ec590e812ad1f50eab94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_log_stream" kindref="compound">aiLogStream</ref></type>
        <definition>ASSIMP_API C_STRUCT aiLogStream aiGetPredefinedLogStream</definition>
        <argsstring>(C_ENUM aiDefaultLogStream pStreams, const char *file)</argsstring>
        <name>aiGetPredefinedLogStream</name>
        <param>
          <type><ref refid="defs_8h_1aa8c1788fd9d096036c9e3b6cfe4b1301" kindref="member">C_ENUM</ref> <ref refid="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6" kindref="member">aiDefaultLogStream</ref></type>
          <declname>pStreams</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Get one of the predefine log streams. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the quick&apos;n&apos;easy solution to access <ref refid="namespace_assimp" kindref="compound">Assimp</ref>&apos;s log system. Attaching a log stream can slightly reduce <ref refid="namespace_assimp" kindref="compound">Assimp</ref>&apos;s overall import performance.</para>
<para>Usage is rather simple (this will stream the log to a file, named log.txt, and the stdout stream of the process: <programlisting><codeline><highlight class="normal">struct<sp/>aiLogStream<sp/>c;</highlight></codeline>
<codeline><highlight class="normal">c<sp/>=<sp/>aiGetPredefinedLogStream(aiDefaultLogStream_FILE,&quot;log.txt&quot;);</highlight></codeline>
<codeline><highlight class="normal">aiAttachLogStream(&amp;c);</highlight></codeline>
<codeline><highlight class="normal">c<sp/>=<sp/>aiGetPredefinedLogStream(aiDefaultLogStream_STDOUT,NULL);</highlight></codeline>
<codeline><highlight class="normal">aiAttachLogStream(&amp;c);</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pStreams</parametername>
</parameternamelist>
<parameterdescription>
<para>One of the <ref refid="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6" kindref="member">aiDefaultLogStream</ref> enumerated values. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Solely for the <ref refid="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6a53f81f9d36437ced72e67b297dc17815" kindref="member">aiDefaultLogStream_FILE</ref> flag: specifies the file to write to. Pass NULL for all other flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The log stream. callback is set to NULL if something went wrong. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="280" column="33" declfile="include/assimp/cimport.h" declline="280" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a1e1bf11ec19f8be587c767f3910384ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiIdentityMatrix3</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *mat)</argsstring>
        <name>aiIdentityMatrix3</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Get a 3x3 identity matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to receive its personal identity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="538" column="17" declfile="include/assimp/cimport.h" declline="538" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ae7af650c79ce312146d55c46f3484508" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiIdentityMatrix4</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat)</argsstring>
        <name>aiIdentityMatrix4</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Get a 4x4 identity matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to receive its personal identity </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="545" column="17" declfile="include/assimp/cimport.h" declline="545" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a37baf75d55599334097f7337ce8f25c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
        <definition>ASSIMP_API const C_STRUCT aiScene* aiImportFile</definition>
        <argsstring>(const char *pFile, unsigned int pFlags)</argsstring>
        <name>aiImportFile</name>
        <param>
          <type>const char *</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pFlags</declname>
        </param>
        <briefdescription>
<para>Reads the given file and returns its content. </para>
        </briefdescription>
        <detaileddescription>
<para>If the call succeeds, the imported data is returned in an <ref refid="structai_scene" kindref="compound">aiScene</ref> structure. The data is intended to be read-only, it stays property of the ASSIMP library and will be stable until <ref refid="cimport_8h_1a9d360f95be3deb87f40abf25d4c047dc" kindref="member">aiReleaseImport()</ref> is called. After you&apos;re done with it, call <ref refid="cimport_8h_1a9d360f95be3deb87f40abf25d4c047dc" kindref="member">aiReleaseImport()</ref> to free the resources associated with this file. If the import fails, NULL is returned instead. Call <ref refid="cimport_8h_1a74c227c3ee707049a1295356f4c0af0e" kindref="member">aiGetErrorString()</ref> to retrieve a human-readable error text. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path and filename of the file to be imported, expected to be a null-terminated c-string. NULL is not a valid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional post processing steps to be executed after a successful import. Provide a bitwise combination of the <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410" kindref="member">aiPostProcessSteps</ref> flags. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the imported data or NULL if the import failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="117" column="35" declfile="include/assimp/cimport.h" declline="117" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a60c8f08f9daa728b5e2d20623e81cd13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
        <definition>ASSIMP_API const C_STRUCT aiScene* aiImportFileEx</definition>
        <argsstring>(const char *pFile, unsigned int pFlags, C_STRUCT aiFileIO *pFS)</argsstring>
        <name>aiImportFileEx</name>
        <param>
          <type>const char *</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pFlags</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_file_i_o" kindref="compound">aiFileIO</ref> *</type>
          <declname>pFS</declname>
        </param>
        <briefdescription>
<para>Reads the given file using user-defined I/O functions and returns its content. </para>
        </briefdescription>
        <detaileddescription>
<para>If the call succeeds, the imported data is returned in an <ref refid="structai_scene" kindref="compound">aiScene</ref> structure. The data is intended to be read-only, it stays property of the ASSIMP library and will be stable until <ref refid="cimport_8h_1a9d360f95be3deb87f40abf25d4c047dc" kindref="member">aiReleaseImport()</ref> is called. After you&apos;re done with it, call <ref refid="cimport_8h_1a9d360f95be3deb87f40abf25d4c047dc" kindref="member">aiReleaseImport()</ref> to free the resources associated with this file. If the import fails, NULL is returned instead. Call <ref refid="cimport_8h_1a74c227c3ee707049a1295356f4c0af0e" kindref="member">aiGetErrorString()</ref> to retrieve a human-readable error text. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path and filename of the file to be imported, expected to be a null-terminated c-string. NULL is not a valid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional post processing steps to be executed after a successful import. Provide a bitwise combination of the <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410" kindref="member">aiPostProcessSteps</ref> flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pFS</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structai_file_i_o" kindref="compound">aiFileIO</ref> structure. Will be used to open the model file itself and any other files the loader needs to open. Pass NULL to use the default implementation. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the imported data or NULL if the import failed. </para>
</simplesect>
<simplesect kind="note"><para>Include &lt;aiFileIO.h&gt; for the definition of <ref refid="structai_file_i_o" kindref="compound">aiFileIO</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="142" column="35" declfile="include/assimp/cimport.h" declline="142" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a9ec6845e46be4043cedb579bb85fcc0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
        <definition>ASSIMP_API const C_STRUCT aiScene* aiImportFileExWithProperties</definition>
        <argsstring>(const char *pFile, unsigned int pFlags, C_STRUCT aiFileIO *pFS, const C_STRUCT aiPropertyStore *pProps)</argsstring>
        <name>aiImportFileExWithProperties</name>
        <param>
          <type>const char *</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pFlags</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_file_i_o" kindref="compound">aiFileIO</ref> *</type>
          <declname>pFS</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> *</type>
          <declname>pProps</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="cimport_8h_1a60c8f08f9daa728b5e2d20623e81cd13" kindref="member">aiImportFileEx</ref>, but adds an extra parameter containing importer settings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path and filename of the file to be imported, expected to be a null-terminated c-string. NULL is not a valid value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional post processing steps to be executed after a successful import. Provide a bitwise combination of the <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410" kindref="member">aiPostProcessSteps</ref> flags. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pFS</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structai_file_i_o" kindref="compound">aiFileIO</ref> structure. Will be used to open the model file itself and any other files the loader needs to open. Pass NULL to use the default implementation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pProps</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> instance containing import settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the imported data or NULL if the import failed. </para>
</simplesect>
<simplesect kind="note"><para>Include &lt;aiFileIO.h&gt; for the definition of <ref refid="structai_file_i_o" kindref="compound">aiFileIO</ref>. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="cimport_8h_1a60c8f08f9daa728b5e2d20623e81cd13" kindref="member">aiImportFileEx</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="163" column="35" declfile="include/assimp/cimport.h" declline="163" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a5d1825f4fd3d6b384c4eee8238b7539e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
        <definition>ASSIMP_API const C_STRUCT aiScene* aiImportFileFromMemory</definition>
        <argsstring>(const char *pBuffer, unsigned int pLength, unsigned int pFlags, const char *pHint)</argsstring>
        <name>aiImportFileFromMemory</name>
        <param>
          <type>const char *</type>
          <declname>pBuffer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pLength</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pFlags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pHint</declname>
        </param>
        <briefdescription>
<para>Reads the given file from a given memory buffer,. </para>
        </briefdescription>
        <detaileddescription>
<para>If the call succeeds, the contents of the file are returned as a pointer to an <ref refid="structai_scene" kindref="compound">aiScene</ref> object. The returned data is intended to be read-only, the importer keeps ownership of the data and will destroy it upon destruction. If the import fails, NULL is returned. A human-readable error description can be retrieved by calling <ref refid="cimport_8h_1a74c227c3ee707049a1295356f4c0af0e" kindref="member">aiGetErrorString()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the file data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of pBuffer, in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional post processing steps to be executed after a successful import. Provide a bitwise combination of the <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410" kindref="member">aiPostProcessSteps</ref> flags. If you wish to inspect the imported scene first in order to fine-tune your post-processing setup, consider to use <ref refid="cimport_8h_1af399cb7002e348f6b9228cff3f836c6c" kindref="member">aiApplyPostProcessing()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pHint</parametername>
</parameternamelist>
<parameterdescription>
<para>An additional hint to the library. If this is a non empty string, the library looks for a loader to support the file extension specified by pHint and passes the file to the first matching loader. If this loader is unable to completely the request, the library continues and tries to determine the file format on its own, a task that may or may not be successful. Check the return value, and you&apos;ll know ... </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the imported data, NULL if the import failed.</para>
</simplesect>
<simplesect kind="note"><para>This is a straightforward way to decode models from memory buffers, but it doesn&apos;t handle model formats that spread their data across multiple files or even directories. Examples include OBJ or MD3, which outsource parts of their material info into external scripts. If you need full functionality, provide a custom IOSystem to make <ref refid="namespace_assimp" kindref="compound">Assimp</ref> find these files and use the regular <ref refid="cimport_8h_1a60c8f08f9daa728b5e2d20623e81cd13" kindref="member">aiImportFileEx()</ref>/aiImportFileExWithProperties() API. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="200" column="35" declfile="include/assimp/cimport.h" declline="200" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1aa0230ea67e3054675d6e17b66b51d6de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
        <definition>ASSIMP_API const C_STRUCT aiScene* aiImportFileFromMemoryWithProperties</definition>
        <argsstring>(const char *pBuffer, unsigned int pLength, unsigned int pFlags, const char *pHint, const C_STRUCT aiPropertyStore *pProps)</argsstring>
        <name>aiImportFileFromMemoryWithProperties</name>
        <param>
          <type>const char *</type>
          <declname>pBuffer</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pLength</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pFlags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pHint</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> *</type>
          <declname>pProps</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="cimport_8h_1a5d1825f4fd3d6b384c4eee8238b7539e" kindref="member">aiImportFileFromMemory</ref>, but adds an extra parameter containing importer settings. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the file data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pLength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of pBuffer, in bytes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pFlags</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional post processing steps to be executed after a successful import. Provide a bitwise combination of the <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410" kindref="member">aiPostProcessSteps</ref> flags. If you wish to inspect the imported scene first in order to fine-tune your post-processing setup, consider to use <ref refid="cimport_8h_1af399cb7002e348f6b9228cff3f836c6c" kindref="member">aiApplyPostProcessing()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pHint</parametername>
</parameternamelist>
<parameterdescription>
<para>An additional hint to the library. If this is a non empty string, the library looks for a loader to support the file extension specified by pHint and passes the file to the first matching loader. If this loader is unable to completely the request, the library continues and tries to determine the file format on its own, a task that may or may not be successful. Check the return value, and you&apos;ll know ... </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pProps</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> instance containing import settings. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the imported data, NULL if the import failed.</para>
</simplesect>
<simplesect kind="note"><para>This is a straightforward way to decode models from memory buffers, but it doesn&apos;t handle model formats that spread their data across multiple files or even directories. Examples include OBJ or MD3, which outsource parts of their material info into external scripts. If you need full functionality, provide a custom IOSystem to make <ref refid="namespace_assimp" kindref="compound">Assimp</ref> find these files and use the regular <ref refid="cimport_8h_1a60c8f08f9daa728b5e2d20623e81cd13" kindref="member">aiImportFileEx()</ref>/aiImportFileExWithProperties() API. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="cimport_8h_1a5d1825f4fd3d6b384c4eee8238b7539e" kindref="member">aiImportFileFromMemory</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="234" column="35" declfile="include/assimp/cimport.h" declline="234" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1adf7ad488ca981fc8800e48e35ddc49e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> <ref refid="cimport_8h_1aaf9b3b6ed742722b3d0bbff0f4621691" kindref="member">aiBool</ref></type>
        <definition>ASSIMP_API aiBool aiIsExtensionSupported</definition>
        <argsstring>(const char *szExtension)</argsstring>
        <name>aiIsExtensionSupported</name>
        <param>
          <type>const char *</type>
          <declname>szExtension</declname>
        </param>
        <briefdescription>
<para>Returns whether a given file extension is supported by ASSIMP. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>szExtension</parametername>
</parameternamelist>
<parameterdescription>
<para>Extension for which the function queries support for. Must include a leading dot &apos;.&apos;. Example: &quot;.3ds&quot;, &quot;.md3&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>AI_TRUE if the file extension is supported. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="353" column="19" declfile="include/assimp/cimport.h" declline="353" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a110da1b8c6b45f2b3952608e22accf95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiMatrix3AreEqual</definition>
        <argsstring>(const C_STRUCT aiMatrix3x3 *a, const C_STRUCT aiMatrix3x3 *b)</argsstring>
        <name>aiMatrix3AreEqual</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Check if 3x3 matrices are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First matrix to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second matrix to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the matrices are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the matrices are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="864" column="16" declfile="include/assimp/cimport.h" declline="864" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a4aa00973c551b9e152796e4f366beefb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiMatrix3AreEqualEpsilon</definition>
        <argsstring>(const C_STRUCT aiMatrix3x3 *a, const C_STRUCT aiMatrix3x3 *b, const float epsilon)</argsstring>
        <name>aiMatrix3AreEqualEpsilon</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Check if 3x3 matrices are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First matrix to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second matrix to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the matrices are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the matrices are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="876" column="16" declfile="include/assimp/cimport.h" declline="876" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ac6216a1aeaa9bb0113c55babfcfe718a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> float</type>
        <definition>ASSIMP_API float aiMatrix3Determinant</definition>
        <argsstring>(const C_STRUCT aiMatrix3x3 *mat)</argsstring>
        <name>aiMatrix3Determinant</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Get the determinant of a 3x3 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to get the determinant from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="892" column="18" declfile="include/assimp/cimport.h" declline="892" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a3c08715c4cff3156db831d1c168ad75c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix3FromMatrix4</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *dst, const C_STRUCT aiMatrix4x4 *mat)</argsstring>
        <name>aiMatrix3FromMatrix4</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Construct a 3x3 matrix from a 4x4 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The 4x4 matrix to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="844" column="17" declfile="include/assimp/cimport.h" declline="844" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a210e38de6e4840f51df0b4609d9e6f3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix3FromQuaternion</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *mat, const C_STRUCT aiQuaternion *q)</argsstring>
        <name>aiMatrix3FromQuaternion</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Construct a 3x3 matrix from a quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>The quaternion matrix to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="853" column="17" declfile="include/assimp/cimport.h" declline="853" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1af9aa9c1b191f70daedf197830f3ebceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix3FromRotationAroundAxis</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *mat, const C_STRUCT aiVector3D *axis, const float angle)</argsstring>
        <name>aiMatrix3FromRotationAroundAxis</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Returns a 3x3 rotation matrix for a rotation around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation axis, should be a normalized vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle, in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="910" column="17" declfile="include/assimp/cimport.h" declline="910" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a6cbf731a617e671036daf330b8a24d11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix3FromTo</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *mat, const C_STRUCT aiVector3D *from, const C_STRUCT aiVector3D *to)</argsstring>
        <name>aiMatrix3FromTo</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Create a 3x3 matrix that rotates one vector to another vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to rotate from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to rotate to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="930" column="17" declfile="include/assimp/cimport.h" declline="930" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a908df55e96d0325cdc11cb4046b3924e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix3Inverse</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *mat)</argsstring>
        <name>aiMatrix3Inverse</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Invert a 3x3 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to invert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="885" column="17" declfile="include/assimp/cimport.h" declline="885" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ab92b0b84fe56833684bf0a6daa09375a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix3RotationZ</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *mat, const float angle)</argsstring>
        <name>aiMatrix3RotationZ</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Get a 3x3 rotation matrix around the Z axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle, in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="900" column="17" declfile="include/assimp/cimport.h" declline="900" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a629bb259d1fb0d1642bca1ad193a1a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix3Translation</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *mat, const C_STRUCT aiVector2D *translation)</argsstring>
        <name>aiMatrix3Translation</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>Get a 3x3 translation matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>translation</parametername>
</parameternamelist>
<parameterdescription>
<para>The translation vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="920" column="17" declfile="include/assimp/cimport.h" declline="920" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ac776cef5575489668b3a6d9dc4b5b9bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4Add</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *dst, const C_STRUCT aiMatrix4x4 *src)</argsstring>
        <name>aiMatrix4Add</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Add 4x4 matrices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>First addend, receives result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to be added to &apos;dst&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="962" column="17" declfile="include/assimp/cimport.h" declline="962" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ade5fc9bc42ce480302bbc46dca0a1f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiMatrix4AreEqual</definition>
        <argsstring>(const C_STRUCT aiMatrix4x4 *a, const C_STRUCT aiMatrix4x4 *b)</argsstring>
        <name>aiMatrix4AreEqual</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Check if 4x4 matrices are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First matrix to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second matrix to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the matrices are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the matrices are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="973" column="16" declfile="include/assimp/cimport.h" declline="973" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a1cb3dc49cf49438e3e119f749ebbb89a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiMatrix4AreEqualEpsilon</definition>
        <argsstring>(const C_STRUCT aiMatrix4x4 *a, const C_STRUCT aiMatrix4x4 *b, const float epsilon)</argsstring>
        <name>aiMatrix4AreEqualEpsilon</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Check if 4x4 matrices are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First matrix to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second matrix to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the matrices are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the matrices are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="985" column="16" declfile="include/assimp/cimport.h" declline="985" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a9b9e8095af73bbcb7ece6522d1e5afab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4DecomposeIntoScalingAxisAnglePosition</definition>
        <argsstring>(const C_STRUCT aiMatrix4x4 *mat, C_STRUCT aiVector3D *scaling, C_STRUCT aiVector3D *axis, ai_real *angle, C_STRUCT aiVector3D *position)</argsstring>
        <name>aiMatrix4DecomposeIntoScalingAxisAnglePosition</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>axis</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref> *</type>
          <declname>angle</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Decompose a transformation matrix into its scaling, rotational split into an axis and rotational angle, and it&apos;s translational components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to decompose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the rotational component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output rotation axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output rotation angle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output position for the x,y,z axes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1040" column="17" declfile="include/assimp/cimport.h" declline="1040" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1acde8a130e1ceddfed3f6aaef9cfbc202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4DecomposeIntoScalingEulerAnglesPosition</definition>
        <argsstring>(const C_STRUCT aiMatrix4x4 *mat, C_STRUCT aiVector3D *scaling, C_STRUCT aiVector3D *rotation, C_STRUCT aiVector3D *position)</argsstring>
        <name>aiMatrix4DecomposeIntoScalingEulerAnglesPosition</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Decompose a transformation matrix into its scaling, rotational as euler angles, and translational components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to decompose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output scaling for the x,y,z axes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output rotation as a Euler angles </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output position for the x,y,z axes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1023" column="17" declfile="include/assimp/cimport.h" declline="1023" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a1088673571a5d1ac3f0d350b1ec64eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4DecomposeNoScaling</definition>
        <argsstring>(const C_STRUCT aiMatrix4x4 *mat, C_STRUCT aiQuaternion *rotation, C_STRUCT aiVector3D *position)</argsstring>
        <name>aiMatrix4DecomposeNoScaling</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Decompose a transformation matrix into its rotational and translational components. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to decompose </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the rotational component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the translational component. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1055" column="17" declfile="include/assimp/cimport.h" declline="1055" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ae7359961d377445845bf7351d16f9e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> float</type>
        <definition>ASSIMP_API float aiMatrix4Determinant</definition>
        <argsstring>(const C_STRUCT aiMatrix4x4 *mat)</argsstring>
        <name>aiMatrix4Determinant</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Get the determinant of a 4x4 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to get the determinant from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The determinant of the matrix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1002" column="18" declfile="include/assimp/cimport.h" declline="1002" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a614f4e244dcf3675caff5e58e622c724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4FromEulerAngles</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat, float x, float y, float z)</argsstring>
        <name>aiMatrix4FromEulerAngles</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Creates a 4x4 matrix from a set of euler angles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle for the x-axis, in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle for the y-axis, in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle for the z-axis, in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1067" column="17" declfile="include/assimp/cimport.h" declline="1067" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1aff9e67a646bcbee082a04f3263c3b370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4FromMatrix3</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *dst, const C_STRUCT aiMatrix3x3 *mat)</argsstring>
        <name>aiMatrix4FromMatrix3</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Construct a 4x4 matrix from a 3x3 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>The 3x3 matrix to use </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="940" column="17" declfile="include/assimp/cimport.h" declline="940" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a55c1f4c9f5a9e390be747e4d32ea01bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4FromRotationAroundAxis</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat, const C_STRUCT aiVector3D *axis, const float angle)</argsstring>
        <name>aiMatrix4FromRotationAroundAxis</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Returns a 4x4 rotation matrix for a rotation around an arbitrary axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation axis, should be a normalized vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle, in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1104" column="17" declfile="include/assimp/cimport.h" declline="1104" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a6862bf926075ef8f31d30bb7deebadb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4FromScalingQuaternionPosition</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat, const C_STRUCT aiVector3D *scaling, const C_STRUCT aiQuaternion *rotation, const C_STRUCT aiVector3D *position)</argsstring>
        <name>aiMatrix4FromScalingQuaternionPosition</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>rotation</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Construct a 4x4 matrix from scaling, rotation and position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling for the x,y,z axes </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rotation</parametername>
</parameternamelist>
<parameterdescription>
<para>The rotation as a hamilton quaternion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position for the x,y,z axes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="951" column="17" declfile="include/assimp/cimport.h" declline="951" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1adca34cb6c417e5f93facb179ee15b792" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4FromTo</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat, const C_STRUCT aiVector3D *from, const C_STRUCT aiVector3D *to)</argsstring>
        <name>aiMatrix4FromTo</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>to</declname>
        </param>
        <briefdescription>
<para>Create a 4x4 matrix that rotates one vector to another vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to rotate from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to rotate to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1133" column="17" declfile="include/assimp/cimport.h" declline="1133" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a9f56eae7a0ff03b6959cc3e8f49c5471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4Inverse</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat)</argsstring>
        <name>aiMatrix4Inverse</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Invert a 4x4 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to invert </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="994" column="17" declfile="include/assimp/cimport.h" declline="994" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a614bf7c554b73ac4fb017232e9733f7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiMatrix4IsIdentity</definition>
        <argsstring>(const C_STRUCT aiMatrix4x4 *mat)</argsstring>
        <name>aiMatrix4IsIdentity</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Returns true of the matrix is the identity matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to get the determinant from </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>mat</computeroutput> is an identity matrix. </para>
</simplesect>
<simplesect kind="return"><para>0 if <computeroutput>mat</computeroutput> is not an identity matrix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1011" column="16" declfile="include/assimp/cimport.h" declline="1011" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1abd32525a685798f943c0d0879c6803f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4RotationX</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat, const float angle)</argsstring>
        <name>aiMatrix4RotationX</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Get a 4x4 rotation matrix around the X axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle, in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1076" column="17" declfile="include/assimp/cimport.h" declline="1076" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a32ee0305287cd9acb71aee20a9f7dc26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4RotationY</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat, const float angle)</argsstring>
        <name>aiMatrix4RotationY</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Get a 4x4 rotation matrix around the Y axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle, in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1085" column="17" declfile="include/assimp/cimport.h" declline="1085" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a522a8d4f06df87bad085a0ca52ae9b3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4RotationZ</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat, const float angle)</argsstring>
        <name>aiMatrix4RotationZ</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Get a 4x4 rotation matrix around the Z axis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle, in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1094" column="17" declfile="include/assimp/cimport.h" declline="1094" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ad817fd02b90bc03d272bbf70d1c475be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4Scaling</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat, const C_STRUCT aiVector3D *scaling)</argsstring>
        <name>aiMatrix4Scaling</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>scaling</declname>
        </param>
        <briefdescription>
<para>Get a 4x4 scaling matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>The scaling vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1123" column="17" declfile="include/assimp/cimport.h" declline="1123" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1acf1e51b238c89a591697b7c7b042a3e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMatrix4Translation</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat, const C_STRUCT aiVector3D *translation)</argsstring>
        <name>aiMatrix4Translation</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>translation</declname>
        </param>
        <briefdescription>
<para>Get a 4x4 translation matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>translation</parametername>
</parameternamelist>
<parameterdescription>
<para>The translation vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1114" column="17" declfile="include/assimp/cimport.h" declline="1114" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a756317f04e6b1f1fdbda294a0fc9d8b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMultiplyMatrix3</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *dst, const C_STRUCT aiMatrix3x3 *src)</argsstring>
        <name>aiMultiplyMatrix3</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Multiply two 3x3 matrices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>First factor, receives result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to be multiplied with &apos;dst&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="530" column="17" declfile="include/assimp/cimport.h" declline="530" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1addcc9b42dd7afac376679bc66a98fb4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiMultiplyMatrix4</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *dst, const C_STRUCT aiMatrix4x4 *src)</argsstring>
        <name>aiMultiplyMatrix4</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Multiply two 4x4 matrices. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>First factor, receives result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to be multiplied with &apos;dst&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="521" column="17" declfile="include/assimp/cimport.h" declline="521" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ac0c4d303f2bc7a2c709c77b37ff8642e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiQuaternionAreEqual</definition>
        <argsstring>(const C_STRUCT aiQuaternion *a, const C_STRUCT aiQuaternion *b)</argsstring>
        <name>aiQuaternionAreEqual</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Check if quaternions are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First quaternion to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second quaternion to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the quaternions are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the quaternions are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1177" column="16" declfile="include/assimp/cimport.h" declline="1177" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1acfe60c5a39046c23735f56efb3fd2599" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiQuaternionAreEqualEpsilon</definition>
        <argsstring>(const C_STRUCT aiQuaternion *a, const C_STRUCT aiQuaternion *b, const float epsilon)</argsstring>
        <name>aiQuaternionAreEqualEpsilon</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Check if quaternions are equal using epsilon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First quaternion to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second quaternion to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the quaternions are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the quaternions are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1189" column="16" declfile="include/assimp/cimport.h" declline="1189" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a7f95379c84b89a71039ef7d2f1f48ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiQuaternionConjugate</definition>
        <argsstring>(C_STRUCT aiQuaternion *q)</argsstring>
        <name>aiQuaternionConjugate</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Compute quaternion conjugate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion to compute conjugate, receives the output quaternion </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1206" column="17" declfile="include/assimp/cimport.h" declline="1206" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a4905af66bbbc89a94b8ecd991404f27a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiQuaternionFromAxisAngle</definition>
        <argsstring>(C_STRUCT aiQuaternion *q, const C_STRUCT aiVector3D *axis, const float angle)</argsstring>
        <name>aiQuaternionFromAxisAngle</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>angle</declname>
        </param>
        <briefdescription>
<para>Create a Quaternion from an axis angle pair. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output quaternion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis</parametername>
</parameternamelist>
<parameterdescription>
<para>The orientation axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angle</parametername>
</parameternamelist>
<parameterdescription>
<para>The rotation angle, in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1155" column="17" declfile="include/assimp/cimport.h" declline="1155" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a5b91f777352483e071565305439ddc58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiQuaternionFromEulerAngles</definition>
        <argsstring>(C_STRUCT aiQuaternion *q, float x, float y, float z)</argsstring>
        <name>aiQuaternionFromEulerAngles</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <param>
          <type>float</type>
          <declname>y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Create a Quaternion from euler angles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output quaternion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle for the x-axis, in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle for the y-axis, in radians </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>Rotation angle for the z-axis, in radians </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1145" column="17" declfile="include/assimp/cimport.h" declline="1145" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a40f1e286c016046d93b898a615a50d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiQuaternionFromNormalizedQuaternion</definition>
        <argsstring>(C_STRUCT aiQuaternion *q, const C_STRUCT aiVector3D *normalized)</argsstring>
        <name>aiQuaternionFromNormalizedQuaternion</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>q</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>normalized</declname>
        </param>
        <briefdescription>
<para>Create a Quaternion from a normalized quaternion stored in a 3D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the output quaternion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>normalized</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector that stores the quaternion </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1166" column="17" declfile="include/assimp/cimport.h" declline="1166" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a737dbdbfe30cf5cde4cd7ff52bd5e0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiQuaternionInterpolate</definition>
        <argsstring>(C_STRUCT aiQuaternion *dst, const C_STRUCT aiQuaternion *start, const C_STRUCT aiQuaternion *end, const float factor)</argsstring>
        <name>aiQuaternionInterpolate</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>factor</declname>
        </param>
        <briefdescription>
<para>Performs a spherical interpolation between two quaternions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Receives the quaternion resulting from the interpolation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion when factor == 0 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion when factor == 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Interpolation factor between 0 and 1 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1225" column="17" declfile="include/assimp/cimport.h" declline="1225" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a68b266354ba787b887edbb2197d5ec38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiQuaternionMultiply</definition>
        <argsstring>(C_STRUCT aiQuaternion *dst, const C_STRUCT aiQuaternion *q)</argsstring>
        <name>aiQuaternionMultiply</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Multiply quaternions. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>First quaternion, receives the output quaternion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>Second quaternion </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1214" column="17" declfile="include/assimp/cimport.h" declline="1214" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a688b5b7f8c0ea71ee69cca9760363b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiQuaternionNormalize</definition>
        <argsstring>(C_STRUCT aiQuaternion *q)</argsstring>
        <name>aiQuaternionNormalize</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Normalize a quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion to normalize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="1198" column="17" declfile="include/assimp/cimport.h" declline="1198" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a9d360f95be3deb87f40abf25d4c047dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiReleaseImport</definition>
        <argsstring>(const C_STRUCT aiScene *pScene)</argsstring>
        <name>aiReleaseImport</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_scene" kindref="compound">aiScene</ref> *</type>
          <declname>pScene</declname>
        </param>
        <briefdescription>
<para>Releases all resources associated with the given import process. </para>
        </briefdescription>
        <detaileddescription>
<para>Call this function after you&apos;re done with the imported data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pScene</parametername>
</parameternamelist>
<parameterdescription>
<para>The imported data to release. NULL is a valid value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="334" column="17" declfile="include/assimp/cimport.h" declline="334" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a579dddd75dbba5621c235df780ffc3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiReleasePropertyStore</definition>
        <argsstring>(C_STRUCT aiPropertyStore *p)</argsstring>
        <name>aiReleasePropertyStore</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Delete a property store. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>Property store to be deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="388" column="17" declfile="include/assimp/cimport.h" declline="388" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a7a3fdb2a587ce72c66182b87465d664d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiSetImportPropertyFloat</definition>
        <argsstring>(C_STRUCT aiPropertyStore *store, const char *szName, ai_real value)</argsstring>
        <name>aiSetImportPropertyFloat</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> *</type>
          <declname>store</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>szName</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set a floating-point property. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the C-version of <ref refid="class_assimp_1_1_importer_1ad38af78d6fe4b1f132d2534d8a84deea" kindref="member">Assimp::Importer::SetPropertyFloat()</ref>. In the C interface, properties are always shared by all imports. It is not possible to specify them per import.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Store to modify. Use <ref refid="cimport_8h_1a523d3d8b510203fb1a80d8702283f8c9" kindref="member">aiCreatePropertyStore</ref> to obtain a store. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>szName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the configuration property to be set. All supported public properties are defined in the <ref refid="config_8h" kindref="compound">config.h</ref> header file (AI_CONFIG_XXX). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value for the property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="419" column="17" declfile="include/assimp/cimport.h" declline="419" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a77fe5bf63f5b7811b10fb1ea072cd995" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiSetImportPropertyInteger</definition>
        <argsstring>(C_STRUCT aiPropertyStore *store, const char *szName, int value)</argsstring>
        <name>aiSetImportPropertyInteger</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> *</type>
          <declname>store</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>szName</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set an integer property. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the C-version of <ref refid="class_assimp_1_1_importer_1a2542eed3d5f491025c4095b4e55fa068" kindref="member">Assimp::Importer::SetPropertyInteger()</ref>. In the C interface, properties are always shared by all imports. It is not possible to specify them per import.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Store to modify. Use <ref refid="cimport_8h_1a523d3d8b510203fb1a80d8702283f8c9" kindref="member">aiCreatePropertyStore</ref> to obtain a store. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>szName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the configuration property to be set. All supported public properties are defined in the <ref refid="config_8h" kindref="compound">config.h</ref> header file (AI_CONFIG_XXX). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>New value for the property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="402" column="17" declfile="include/assimp/cimport.h" declline="402" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a9c55a41ee04a8bf624d2a735eebf4c87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiSetImportPropertyMatrix</definition>
        <argsstring>(C_STRUCT aiPropertyStore *store, const char *szName, const C_STRUCT aiMatrix4x4 *mat)</argsstring>
        <name>aiSetImportPropertyMatrix</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> *</type>
          <declname>store</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>szName</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Set a matrix property. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the C-version of <ref refid="class_assimp_1_1_importer_1acd128e5fb5777ef238b8bd1454a9c3ad" kindref="member">Assimp::Importer::SetPropertyMatrix()</ref>. In the C interface, properties are always shared by all imports. It is not possible to specify them per import.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Store to modify. Use <ref refid="cimport_8h_1a523d3d8b510203fb1a80d8702283f8c9" kindref="member">aiCreatePropertyStore</ref> to obtain a store. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>szName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the configuration property to be set. All supported public properties are defined in the <ref refid="config_8h" kindref="compound">config.h</ref> header file (AI_CONFIG_XXX). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>New value for the property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="453" column="17" declfile="include/assimp/cimport.h" declline="453" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a0c6f78241e9ec7b2470d193858baf22d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiSetImportPropertyString</definition>
        <argsstring>(C_STRUCT aiPropertyStore *store, const char *szName, const C_STRUCT aiString *st)</argsstring>
        <name>aiSetImportPropertyString</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref> *</type>
          <declname>store</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>szName</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="structai_string" kindref="compound">aiString</ref> *</type>
          <declname>st</declname>
        </param>
        <briefdescription>
<para>Set a string property. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the C-version of <ref refid="class_assimp_1_1_importer_1a854087b213981108e3e464cf4d293fed" kindref="member">Assimp::Importer::SetPropertyString()</ref>. In the C interface, properties are always shared by all imports. It is not possible to specify them per import.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Store to modify. Use <ref refid="cimport_8h_1a523d3d8b510203fb1a80d8702283f8c9" kindref="member">aiCreatePropertyStore</ref> to obtain a store. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>szName</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the configuration property to be set. All supported public properties are defined in the <ref refid="config_8h" kindref="compound">config.h</ref> header file (AI_CONFIG_XXX). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>st</parametername>
</parameternamelist>
<parameterdescription>
<para>New value for the property </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="436" column="17" declfile="include/assimp/cimport.h" declline="436" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a3b4fbac8311e9a41c558a0d0798a3e04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiTransformVecByMatrix3</definition>
        <argsstring>(C_STRUCT aiVector3D *vec, const C_STRUCT aiMatrix3x3 *mat)</argsstring>
        <name>aiTransformVecByMatrix3</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Transform a vector by a 3x3 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to transform the vector with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="503" column="17" declfile="include/assimp/cimport.h" declline="503" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ae5fedd4e5296d335c3afd51cca4f180e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiTransformVecByMatrix4</definition>
        <argsstring>(C_STRUCT aiVector3D *vec, const C_STRUCT aiMatrix4x4 *mat)</argsstring>
        <name>aiTransformVecByMatrix4</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Transform a vector by a 4x4 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be transformed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix to transform the vector with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="512" column="17" declfile="include/assimp/cimport.h" declline="512" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1af4b7283f4fab57fe71d5ba2efa65e620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiTransposeMatrix3</definition>
        <argsstring>(C_STRUCT aiMatrix3x3 *mat)</argsstring>
        <name>aiTransposeMatrix3</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix3x3_8h_1abdcfd6b60d3f8c3f90b3e914b55b8e17" kindref="member">aiMatrix3x3</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Transpose a 3x3 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the matrix to be transposed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="495" column="17" declfile="include/assimp/cimport.h" declline="495" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a884f06d627cc76df36c9b4ba67801997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiTransposeMatrix4</definition>
        <argsstring>(C_STRUCT aiMatrix4x4 *mat)</argsstring>
        <name>aiTransposeMatrix4</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="matrix4x4_8h_1a372a3e0c9500833063c8d410de82b6cd" kindref="member">aiMatrix4x4</ref> *</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>Transpose a 4x4 matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mat</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the matrix to be transposed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="488" column="17" declfile="include/assimp/cimport.h" declline="488" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1aa19faec79505e0b382d43744d0422787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector2Add</definition>
        <argsstring>(C_STRUCT aiVector2D *dst, const C_STRUCT aiVector2D *src)</argsstring>
        <name>aiVector2Add</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Add 2D vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>First addend, receives result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be added to &apos;dst&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="592" column="17" declfile="include/assimp/cimport.h" declline="592" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1afdacb5f39a783fd63acb60f662aea88f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiVector2AreEqual</definition>
        <argsstring>(const C_STRUCT aiVector2D *a, const C_STRUCT aiVector2D *b)</argsstring>
        <name>aiVector2AreEqual</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Check if 2D vectors are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the vectors are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the vectors are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="570" column="16" declfile="include/assimp/cimport.h" declline="570" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a303ee3d48123b4db9c2d3cdcf290d9dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiVector2AreEqualEpsilon</definition>
        <argsstring>(const C_STRUCT aiVector2D *a, const C_STRUCT aiVector2D *b, const float epsilon)</argsstring>
        <name>aiVector2AreEqualEpsilon</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Check if 2D vectors are equal using epsilon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the vectors are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the vectors are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="582" column="16" declfile="include/assimp/cimport.h" declline="582" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ac5745147ee76fa3e9b328d3e07d3c02e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector2DivideByScalar</definition>
        <argsstring>(C_STRUCT aiVector2D *dst, const float s)</argsstring>
        <name>aiVector2DivideByScalar</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Divide a 2D vector by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be divided by <computeroutput>s</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar divisor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="629" column="17" declfile="include/assimp/cimport.h" declline="629" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a4860e0daf82b2258ed9981a1daf054d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector2DivideByVector</definition>
        <argsstring>(C_STRUCT aiVector2D *dst, C_STRUCT aiVector2D *v)</argsstring>
        <name>aiVector2DivideByVector</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Divide each component of a 2D vector by the components of another vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector as the dividend </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector as the divisor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="639" column="17" declfile="include/assimp/cimport.h" declline="639" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a8b5e27ca10c6a5895f1aa12a567a1aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> float</type>
        <definition>ASSIMP_API float aiVector2DotProduct</definition>
        <argsstring>(const C_STRUCT aiVector2D *a, const C_STRUCT aiVector2D *b)</argsstring>
        <name>aiVector2DotProduct</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Get the dot product of 2D vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product of vectors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="670" column="18" declfile="include/assimp/cimport.h" declline="670" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a59ba56a20ca296d89f18365dbc1151a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> float</type>
        <definition>ASSIMP_API float aiVector2Length</definition>
        <argsstring>(const C_STRUCT aiVector2D *v)</argsstring>
        <name>aiVector2Length</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Get the length of a 2D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>v Vector to evaluate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="647" column="18" declfile="include/assimp/cimport.h" declline="647" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a435e92ce27e5b2dd702757d498d61259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector2Negate</definition>
        <argsstring>(C_STRUCT aiVector2D *dst)</argsstring>
        <name>aiVector2Negate</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Negate a 2D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be negated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="661" column="17" declfile="include/assimp/cimport.h" declline="661" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a2cf329d38b545ad0d792fc59443720f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector2Normalize</definition>
        <argsstring>(C_STRUCT aiVector2D *v)</argsstring>
        <name>aiVector2Normalize</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Normalize a 2D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to normalize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="678" column="17" declfile="include/assimp/cimport.h" declline="678" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ab87d1ab7266e612681ce68cbbbdc742b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector2Scale</definition>
        <argsstring>(C_STRUCT aiVector2D *dst, const float s)</argsstring>
        <name>aiVector2Scale</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Multiply a 2D vector by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be scaled by <computeroutput>s</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="610" column="17" declfile="include/assimp/cimport.h" declline="610" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ad8de74c8402b2811410795baa916c55b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> float</type>
        <definition>ASSIMP_API float aiVector2SquareLength</definition>
        <argsstring>(const C_STRUCT aiVector2D *v)</argsstring>
        <name>aiVector2SquareLength</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Get the squared length of a 2D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>v Vector to evaluate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="654" column="18" declfile="include/assimp/cimport.h" declline="654" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a960a22e7f4332ef0d2821c50c2a546e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector2Subtract</definition>
        <argsstring>(C_STRUCT aiVector2D *dst, const C_STRUCT aiVector2D *src)</argsstring>
        <name>aiVector2Subtract</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Subtract 2D vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Minuend, receives result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be subtracted from &apos;dst&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="601" column="17" declfile="include/assimp/cimport.h" declline="601" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a6590a0c15d493f42328252794552957a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector2SymMul</definition>
        <argsstring>(C_STRUCT aiVector2D *dst, const C_STRUCT aiVector2D *other)</argsstring>
        <name>aiVector2SymMul</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector2_8h_1a0ac1a29f53f3c10ae2e522525f8e311f" kindref="member">aiVector2D</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Multiply each component of a 2D vector with the components of another vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector, receives result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="620" column="17" declfile="include/assimp/cimport.h" declline="620" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a043069a04f234039695b248c904f710d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3Add</definition>
        <argsstring>(C_STRUCT aiVector3D *dst, const C_STRUCT aiVector3D *src)</argsstring>
        <name>aiVector3Add</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Add 3D vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>First addend, receives result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be added to &apos;dst&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="722" column="17" declfile="include/assimp/cimport.h" declline="722" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a82b300cfbfa90e0313e3c502367d2cd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiVector3AreEqual</definition>
        <argsstring>(const C_STRUCT aiVector3D *a, const C_STRUCT aiVector3D *b)</argsstring>
        <name>aiVector3AreEqual</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Check if 3D vectors are equal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the vectors are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the vectors are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="688" column="16" declfile="include/assimp/cimport.h" declline="688" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a8ccc11c2632f826405646bd7c428633e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiVector3AreEqualEpsilon</definition>
        <argsstring>(const C_STRUCT aiVector3D *a, const C_STRUCT aiVector3D *b, const float epsilon)</argsstring>
        <name>aiVector3AreEqualEpsilon</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>epsilon</declname>
        </param>
        <briefdescription>
<para>Check if 3D vectors are equal using epsilon. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the vectors are equal </para>
</simplesect>
<simplesect kind="return"><para>0 if the vectors are not equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="700" column="16" declfile="include/assimp/cimport.h" declline="700" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a2a14800504f7548ee93ca406025e187b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3CrossProduct</definition>
        <argsstring>(C_STRUCT aiVector3D *dst, const C_STRUCT aiVector3D *a, const C_STRUCT aiVector3D *b)</argsstring>
        <name>aiVector3CrossProduct</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Get cross product of 3D vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to receive the result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product of vectors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="811" column="17" declfile="include/assimp/cimport.h" declline="811" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1aba79aeb9d678f5a5f175565cd3bd8997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3DivideByScalar</definition>
        <argsstring>(C_STRUCT aiVector3D *dst, const float s)</argsstring>
        <name>aiVector3DivideByScalar</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Divide a 3D vector by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be divided by <computeroutput>s</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar divisor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="759" column="17" declfile="include/assimp/cimport.h" declline="759" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1abdec89c729a8f85be791af243b4d1c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3DivideByVector</definition>
        <argsstring>(C_STRUCT aiVector3D *dst, C_STRUCT aiVector3D *v)</argsstring>
        <name>aiVector3DivideByVector</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Divide each component of a 3D vector by the components of another vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector as the dividend </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector as the divisor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="769" column="17" declfile="include/assimp/cimport.h" declline="769" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a8ab27d289a4a383d97105b72c98c277c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> float</type>
        <definition>ASSIMP_API float aiVector3DotProduct</definition>
        <argsstring>(const C_STRUCT aiVector3D *a, const C_STRUCT aiVector3D *b)</argsstring>
        <name>aiVector3DotProduct</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Get the dot product of 3D vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot product of vectors </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="800" column="18" declfile="include/assimp/cimport.h" declline="800" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a3064f3b9e38e94edabdb6359d3972d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> float</type>
        <definition>ASSIMP_API float aiVector3Length</definition>
        <argsstring>(const C_STRUCT aiVector3D *v)</argsstring>
        <name>aiVector3Length</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Get the length of a 3D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>v Vector to evaluate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="777" column="18" declfile="include/assimp/cimport.h" declline="777" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1ab039f7f0231af6cf973344f2b9071345" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> int</type>
        <definition>ASSIMP_API int aiVector3LessThan</definition>
        <argsstring>(const C_STRUCT aiVector3D *a, const C_STRUCT aiVector3D *b)</argsstring>
        <name>aiVector3LessThan</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Check if vector <computeroutput>a</computeroutput> is less than vector <computeroutput>b</computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector to compare </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para>Epsilon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if <computeroutput>a</computeroutput> is less than <computeroutput>b</computeroutput> </para>
</simplesect>
<simplesect kind="return"><para>0 if <computeroutput>a</computeroutput> is equal or greater than <computeroutput>b</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="713" column="16" declfile="include/assimp/cimport.h" declline="713" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a8f6e6d6b4a4596775dfe165e2b32dcdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3Negate</definition>
        <argsstring>(C_STRUCT aiVector3D *dst)</argsstring>
        <name>aiVector3Negate</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Negate a 3D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be negated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="791" column="17" declfile="include/assimp/cimport.h" declline="791" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1abcdd1e68af302f6505d6cb2c0063b158" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3Normalize</definition>
        <argsstring>(C_STRUCT aiVector3D *v)</argsstring>
        <name>aiVector3Normalize</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Normalize a 3D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to normalize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="820" column="17" declfile="include/assimp/cimport.h" declline="820" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a623783417aac17ea9e1453d05f3f06b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3NormalizeSafe</definition>
        <argsstring>(C_STRUCT aiVector3D *v)</argsstring>
        <name>aiVector3NormalizeSafe</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Check for division by zero and normalize a 3D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to normalize </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="827" column="17" declfile="include/assimp/cimport.h" declline="827" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a9a50bb28963ae12b229b1a0e2e8f72fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3RotateByQuaternion</definition>
        <argsstring>(C_STRUCT aiVector3D *v, const C_STRUCT aiQuaternion *q)</argsstring>
        <name>aiVector3RotateByQuaternion</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="quaternion_8h_1a90332e4974fbd571493e0f9b3b5ce707" kindref="member">aiQuaternion</ref> *</type>
          <declname>q</declname>
        </param>
        <briefdescription>
<para>Rotate a 3D vector by a quaternion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to rotate by <computeroutput>q</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q</parametername>
</parameternamelist>
<parameterdescription>
<para>Quaternion to use to rotate <computeroutput>v</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="835" column="17" declfile="include/assimp/cimport.h" declline="835" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a465a1c389160c99113e9250b8b5b0fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3Scale</definition>
        <argsstring>(C_STRUCT aiVector3D *dst, const float s)</argsstring>
        <name>aiVector3Scale</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Multiply a 3D vector by a scalar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be scaled by <computeroutput>s</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="740" column="17" declfile="include/assimp/cimport.h" declline="740" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1af18a359694c6cbf1c074d3447a6838ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> float</type>
        <definition>ASSIMP_API float aiVector3SquareLength</definition>
        <argsstring>(const C_STRUCT aiVector3D *v)</argsstring>
        <name>aiVector3SquareLength</name>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Get the squared length of a 3D vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>v Vector to evaluate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="784" column="18" declfile="include/assimp/cimport.h" declline="784" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1addbab9671fbac4f81ec07dad443e725f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3Subtract</definition>
        <argsstring>(C_STRUCT aiVector3D *dst, const C_STRUCT aiVector3D *src)</argsstring>
        <name>aiVector3Subtract</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Subtract 3D vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Minuend, receives result. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector to be subtracted from &apos;dst&apos;. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="731" column="17" declfile="include/assimp/cimport.h" declline="731" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="cimport_8h_1a71009f6853344a64199d3ccc2be523d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref> void</type>
        <definition>ASSIMP_API void aiVector3SymMul</definition>
        <argsstring>(C_STRUCT aiVector3D *dst, const C_STRUCT aiVector3D *other)</argsstring>
        <name>aiVector3SymMul</name>
        <param>
          <type><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref> <ref refid="vector3_8h_1af90f71b9e287bdc258b1dd86656d8dfe" kindref="member">aiVector3D</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Multiply each component of a 3D vector with the components of another vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>First vector, receives result </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Second vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/cimport.h" line="750" column="17" declfile="include/assimp/cimport.h" declline="750" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Defines the C-API to the Open Asset Import Library. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">---------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="3"><highlight class="comment">Open<sp/>Asset<sp/>Import<sp/>Library<sp/>(assimp)</highlight></codeline>
<codeline lineno="4"><highlight class="comment">---------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Copyright<sp/>(c)<sp/>2006-2021,<sp/>assimp<sp/>team</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>of<sp/>this<sp/>software<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="12"><highlight class="comment">conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>assimp<sp/>team,<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>written<sp/>permission<sp/>of<sp/>the<sp/>assimp<sp/>team.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="29"><highlight class="comment">&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="30"><highlight class="comment">LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight></codeline>
<codeline lineno="32"><highlight class="comment">OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="33"><highlight class="comment">SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="34"><highlight class="comment">LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight></codeline>
<codeline lineno="35"><highlight class="comment">DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight></codeline>
<codeline lineno="36"><highlight class="comment">THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="37"><highlight class="comment">(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="38"><highlight class="comment">OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="39"><highlight class="comment">---------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="40"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AI_ASSIMP_H_INC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AI_ASSIMP_H_INC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>system_header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="importerdesc_8h" kindref="compound">assimp/importerdesc.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="types_8h" kindref="compound">assimp/types.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structai_scene" kindref="compound">aiScene</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structai_file_i_o" kindref="compound">aiFileIO</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="cimport_8h_1a8de903c645dbd8b4f4446c62afa4101b" kindref="member">aiLogStreamCallback</ref>)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*<sp/>message<sp/>*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="comment">/*<sp/>user<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structai_log_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structai_log_stream" kindref="compound">aiLogStream</ref><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cimport_8h_1a8de903c645dbd8b4f4446c62afa4101b" kindref="member">aiLogStreamCallback</ref><sp/><ref refid="structai_log_stream_1ac73ae46eee54ba0f920d6abb97c33e97" kindref="member">callback</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structai_log_stream_1a3382042e4171a6dd5a71d7f98741f86e" kindref="member">user</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="90"><highlight class="comment"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="structai_property_store" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structai_property_store_1a53e97983bdbe38c596c7879555dc42a3" kindref="member">sentinel</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1aaf9b3b6ed742722b3d0bbff0f4621691" kindref="member">aiBool</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AI_FALSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AI_TRUE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="117"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_scene" kindref="compound">aiScene</ref><sp/>*<ref refid="cimport_8h_1a37baf75d55599334097f7337ce8f25c5" kindref="member">aiImportFile</ref>(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFile,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pFlags);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="142"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_scene" kindref="compound">aiScene</ref><sp/>*<ref refid="cimport_8h_1a60c8f08f9daa728b5e2d20623e81cd13" kindref="member">aiImportFileEx</ref>(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFile,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pFlags,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_file_i_o" kindref="compound">aiFileIO</ref><sp/>*pFS);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="163"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_scene" kindref="compound">aiScene</ref><sp/>*<ref refid="cimport_8h_1a9ec6845e46be4043cedb579bb85fcc0c" kindref="member">aiImportFileExWithProperties</ref>(</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pFile,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pFlags,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_file_i_o" kindref="compound">aiFileIO</ref><sp/>*pFS,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref><sp/>*pProps);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="200"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_scene" kindref="compound">aiScene</ref><sp/>*<ref refid="cimport_8h_1a5d1825f4fd3d6b384c4eee8238b7539e" kindref="member">aiImportFileFromMemory</ref>(</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pBuffer,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pLength,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pFlags,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pHint);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="234"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_scene" kindref="compound">aiScene</ref><sp/>*<ref refid="cimport_8h_1aa0230ea67e3054675d6e17b66b51d6de" kindref="member">aiImportFileFromMemoryWithProperties</ref>(</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pBuffer,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pLength,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pFlags,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pHint,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref><sp/>*pProps);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="256"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_scene" kindref="compound">aiScene</ref><sp/>*<ref refid="cimport_8h_1af399cb7002e348f6b9228cff3f836c6c" kindref="member">aiApplyPostProcessing</ref>(</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_scene" kindref="compound">aiScene</ref><sp/>*pScene,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pFlags);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="280"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_log_stream" kindref="compound">aiLogStream</ref><sp/><ref refid="cimport_8h_1ad7e375d7b134ec590e812ad1f50eab94" kindref="member">aiGetPredefinedLogStream</ref>(</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1aa8c1788fd9d096036c9e3b6cfe4b1301" kindref="member">C_ENUM</ref><sp/><ref refid="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6" kindref="member">aiDefaultLogStream</ref><sp/>pStreams,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="294"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a75c5aa6027cb059e63b3dda005c9c149" kindref="member">aiAttachLogStream</ref>(</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_log_stream" kindref="compound">aiLogStream</ref><sp/>*stream);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a54a7485c9422348b2f20adcbd192ed64" kindref="member">aiEnableVerboseLogging</ref>(<ref refid="cimport_8h_1aaf9b3b6ed742722b3d0bbff0f4621691" kindref="member">aiBool</ref><sp/>d);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="315"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/><ref refid="defs_8h_1aa8c1788fd9d096036c9e3b6cfe4b1301" kindref="member">C_ENUM</ref><sp/><ref refid="types_8h_1a1f78dfb65090aa930cabb984c8abe711" kindref="member">aiReturn</ref><sp/><ref refid="cimport_8h_1a98ad05bb95e8f8157a97c133812a1597" kindref="member">aiDetachLogStream</ref>(</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_log_stream" kindref="compound">aiLogStream</ref><sp/>*stream);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="326"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a8f1fe2e8ccc5f93484098114ae7071bf" kindref="member">aiDetachAllLogStreams</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="334"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a9d360f95be3deb87f40abf25d4c047dc" kindref="member">aiReleaseImport</ref>(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_scene" kindref="compound">aiScene</ref><sp/>*pScene);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="344"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="cimport_8h_1a74c227c3ee707049a1295356f4c0af0e" kindref="member">aiGetErrorString</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="353"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/><ref refid="cimport_8h_1aaf9b3b6ed742722b3d0bbff0f4621691" kindref="member">aiBool</ref><sp/><ref refid="cimport_8h_1adf7ad488ca981fc8800e48e35ddc49e9" kindref="member">aiIsExtensionSupported</ref>(</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szExtension);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a99cec86f7950963c0c9ecda87a2e07e2" kindref="member">aiGetExtensionList</ref>(</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_string" kindref="compound">aiString</ref><sp/>*szOut);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="372"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1acf5b67b3700dc01b5f847ad077895e59" kindref="member">aiGetMemoryRequirements</ref>(</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_scene" kindref="compound">aiScene</ref><sp/>*pIn,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_memory_info" kindref="compound">aiMemoryInfo</ref><sp/>*in);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="382"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref><sp/>*<ref refid="cimport_8h_1a523d3d8b510203fb1a80d8702283f8c9" kindref="member">aiCreatePropertyStore</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="388"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a579dddd75dbba5621c235df780ffc3e6" kindref="member">aiReleasePropertyStore</ref>(<ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref><sp/>*p);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="402"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a77fe5bf63f5b7811b10fb1ea072cd995" kindref="member">aiSetImportPropertyInteger</ref>(</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref><sp/>*store,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szName,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="419"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a7a3fdb2a587ce72c66182b87465d664d" kindref="member">aiSetImportPropertyFloat</ref>(</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref><sp/>*store,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szName,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>value);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="436"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a0c6f78241e9ec7b2470d193858baf22d" kindref="member">aiSetImportPropertyString</ref>(</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref><sp/>*store,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szName,</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_string" kindref="compound">aiString</ref><sp/>*st);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="453"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a9c55a41ee04a8bf624d2a735eebf4c87" kindref="member">aiSetImportPropertyMatrix</ref>(</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_property_store" kindref="compound">aiPropertyStore</ref><sp/>*store,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*szName,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="464"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a6fa70de0a410d942b75102d605d700f3" kindref="member">aiCreateQuaternionFromMatrix</ref>(</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*quat,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="478"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a59f68c25251aefbd560582cfe39b9287" kindref="member">aiDecomposeMatrix</ref>(</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*scaling,</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*rotation,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*position);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="488"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a884f06d627cc76df36c9b4ba67801997" kindref="member">aiTransposeMatrix4</ref>(</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="495"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1af4b7283f4fab57fe71d5ba2efa65e620" kindref="member">aiTransposeMatrix3</ref>(</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="503"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a3b4fbac8311e9a41c558a0d0798a3e04" kindref="member">aiTransformVecByMatrix3</ref>(</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*vec,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="512"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ae5fedd4e5296d335c3afd51cca4f180e" kindref="member">aiTransformVecByMatrix4</ref>(</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*vec,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="521"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1addcc9b42dd7afac376679bc66a98fb4e" kindref="member">aiMultiplyMatrix4</ref>(</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*src);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="530"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a756317f04e6b1f1fdbda294a0fc9d8b2" kindref="member">aiMultiplyMatrix3</ref>(</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*src);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="538"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a1e1bf11ec19f8be587c767f3910384ee" kindref="member">aiIdentityMatrix3</ref>(</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="545"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ae7af650c79ce312146d55c46f3484508" kindref="member">aiIdentityMatrix4</ref>(</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="552"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a0052bf974030e06a5f6b2a4c5d2c5d0d" kindref="member">aiGetImportFormatCount</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="561"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="structai_importer_desc" kindref="compound">aiImporterDesc</ref><sp/>*<ref refid="cimport_8h_1aa80b5c006315b73e693feb2ec27ecf34" kindref="member">aiGetImportFormatDescription</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pIndex);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="570"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1afdacb5f39a783fd63acb60f662aea88f" kindref="member">aiVector2AreEqual</ref>(</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*a,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*b);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="582"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a303ee3d48123b4db9c2d3cdcf290d9dd" kindref="member">aiVector2AreEqualEpsilon</ref>(</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*a,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*b,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="592"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1aa19faec79505e0b382d43744d0422787" kindref="member">aiVector2Add</ref>(</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*src);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="601"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a960a22e7f4332ef0d2821c50c2a546e0" kindref="member">aiVector2Subtract</ref>(</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*src);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="610"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ab87d1ab7266e612681ce68cbbbdc742b" kindref="member">aiVector2Scale</ref>(</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="620"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a6590a0c15d493f42328252794552957a" kindref="member">aiVector2SymMul</ref>(</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*other);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="629"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ac5745147ee76fa3e9b328d3e07d3c02e" kindref="member">aiVector2DivideByScalar</ref>(</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="639"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a4860e0daf82b2258ed9981a1daf054d9" kindref="member">aiVector2DivideByVector</ref>(</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*v);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="647"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a59ba56a20ca296d89f18365dbc1151a8" kindref="member">aiVector2Length</ref>(</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*v);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="654"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ad8de74c8402b2811410795baa916c55b" kindref="member">aiVector2SquareLength</ref>(</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*v);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="661"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a435e92ce27e5b2dd702757d498d61259" kindref="member">aiVector2Negate</ref>(</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*dst);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="670"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a8b5e27ca10c6a5895f1aa12a567a1aa8" kindref="member">aiVector2DotProduct</ref>(</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*a,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*b);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="678"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a2cf329d38b545ad0d792fc59443720f7" kindref="member">aiVector2Normalize</ref>(</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*v);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="688"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a82b300cfbfa90e0313e3c502367d2cd0" kindref="member">aiVector3AreEqual</ref>(</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*a,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*b);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="700"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a8ccc11c2632f826405646bd7c428633e" kindref="member">aiVector3AreEqualEpsilon</ref>(</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*a,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*b,</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="713"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ab039f7f0231af6cf973344f2b9071345" kindref="member">aiVector3LessThan</ref>(</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*a,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*b);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="722"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a043069a04f234039695b248c904f710d" kindref="member">aiVector3Add</ref>(</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*src);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="731"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1addbab9671fbac4f81ec07dad443e725f" kindref="member">aiVector3Subtract</ref>(</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*src);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="740"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a465a1c389160c99113e9250b8b5b0fc4" kindref="member">aiVector3Scale</ref>(</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="750"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a71009f6853344a64199d3ccc2be523d2" kindref="member">aiVector3SymMul</ref>(</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*other);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="759"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1aba79aeb9d678f5a5f175565cd3bd8997" kindref="member">aiVector3DivideByScalar</ref>(</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="769"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1abdec89c729a8f85be791af243b4d1c52" kindref="member">aiVector3DivideByVector</ref>(</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*v);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="777"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a3064f3b9e38e94edabdb6359d3972d6d" kindref="member">aiVector3Length</ref>(</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*v);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="784"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1af18a359694c6cbf1c074d3447a6838ed" kindref="member">aiVector3SquareLength</ref>(</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*v);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="791"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a8f6e6d6b4a4596775dfe165e2b32dcdc" kindref="member">aiVector3Negate</ref>(</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*dst);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="800"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a8ab27d289a4a383d97105b72c98c277c" kindref="member">aiVector3DotProduct</ref>(</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*a,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*b);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="811"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a2a14800504f7548ee93ca406025e187b" kindref="member">aiVector3CrossProduct</ref>(</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*a,</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*b);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="820"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1abcdd1e68af302f6505d6cb2c0063b158" kindref="member">aiVector3Normalize</ref>(</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*v);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="827"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a623783417aac17ea9e1453d05f3f06b0" kindref="member">aiVector3NormalizeSafe</ref>(</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*v);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="835"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a9a50bb28963ae12b229b1a0e2e8f72fe" kindref="member">aiVector3RotateByQuaternion</ref>(</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*v,</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*q);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="844"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a3c08715c4cff3156db831d1c168ad75c" kindref="member">aiMatrix3FromMatrix4</ref>(</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="853"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a210e38de6e4840f51df0b4609d9e6f3b" kindref="member">aiMatrix3FromQuaternion</ref>(</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*q);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="864"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a110da1b8c6b45f2b3952608e22accf95" kindref="member">aiMatrix3AreEqual</ref>(</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*a,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*b);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="876"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a4aa00973c551b9e152796e4f366beefb" kindref="member">aiMatrix3AreEqualEpsilon</ref>(</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*a,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*b,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="885"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a908df55e96d0325cdc11cb4046b3924e" kindref="member">aiMatrix3Inverse</ref>(</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="892"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ac6216a1aeaa9bb0113c55babfcfe718a" kindref="member">aiMatrix3Determinant</ref>(</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="900"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ab92b0b84fe56833684bf0a6daa09375a" kindref="member">aiMatrix3RotationZ</ref>(</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="910"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1af9aa9c1b191f70daedf197830f3ebceb" kindref="member">aiMatrix3FromRotationAroundAxis</ref>(</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*axis,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle);</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="920"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a629bb259d1fb0d1642bca1ad193a1a15" kindref="member">aiMatrix3Translation</ref>(</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector2t" kindref="compound">aiVector2D</ref><sp/>*translation);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="930"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a6cbf731a617e671036daf330b8a24d11" kindref="member">aiMatrix3FromTo</ref>(</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*from,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*to);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="940"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1aff9e67a646bcbee082a04f3263c3b370" kindref="member">aiMatrix4FromMatrix3</ref>(</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix3x3t" kindref="compound">aiMatrix3x3</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="951"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a6862bf926075ef8f31d30bb7deebadb7" kindref="member">aiMatrix4FromScalingQuaternionPosition</ref>(</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*scaling,</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*rotation,</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*position);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="962"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ac776cef5575489668b3a6d9dc4b5b9bb" kindref="member">aiMatrix4Add</ref>(</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*src);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="973"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ade5fc9bc42ce480302bbc46dca0a1f71" kindref="member">aiMatrix4AreEqual</ref>(</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*a,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*b);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="985"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a1cb3dc49cf49438e3e119f749ebbb89a" kindref="member">aiMatrix4AreEqualEpsilon</ref>(</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*a,</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*b,</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="994"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a9f56eae7a0ff03b6959cc3e8f49c5471" kindref="member">aiMatrix4Inverse</ref>(</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ae7359961d377445845bf7351d16f9e24" kindref="member">aiMatrix4Determinant</ref>(</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a614bf7c554b73ac4fb017232e9733f7c" kindref="member">aiMatrix4IsIdentity</ref>(</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1acde8a130e1ceddfed3f6aaef9cfbc202" kindref="member">aiMatrix4DecomposeIntoScalingEulerAnglesPosition</ref>(</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*scaling,</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*rotation,</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*position);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a9b9e8095af73bbcb7ece6522d1e5afab" kindref="member">aiMatrix4DecomposeIntoScalingAxisAnglePosition</ref>(</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*scaling,</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*axis,</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>*angle,</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*position);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a1088673571a5d1ac3f0d350b1ec64eee" kindref="member">aiMatrix4DecomposeNoScaling</ref>(</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*rotation,</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*position);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a614f4e244dcf3675caff5e58e622c724" kindref="member">aiMatrix4FromEulerAngles</ref>(</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1abd32525a685798f943c0d0879c6803f2" kindref="member">aiMatrix4RotationX</ref>(</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a32ee0305287cd9acb71aee20a9f7dc26" kindref="member">aiMatrix4RotationY</ref>(</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a522a8d4f06df87bad085a0ca52ae9b3a" kindref="member">aiMatrix4RotationZ</ref>(</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a55c1f4c9f5a9e390be747e4d32ea01bd" kindref="member">aiMatrix4FromRotationAroundAxis</ref>(</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*axis,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1acf1e51b238c89a591697b7c7b042a3e5" kindref="member">aiMatrix4Translation</ref>(</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*translation);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ad817fd02b90bc03d272bbf70d1c475be" kindref="member">aiMatrix4Scaling</ref>(</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*scaling);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1adca34cb6c417e5f93facb179ee15b792" kindref="member">aiMatrix4FromTo</ref>(</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_matrix4x4t" kindref="compound">aiMatrix4x4</ref><sp/>*mat,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*from,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*to);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a5b91f777352483e071565305439ddc58" kindref="member">aiQuaternionFromEulerAngles</ref>(</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*q,</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1155"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a4905af66bbbc89a94b8ecd991404f27a" kindref="member">aiQuaternionFromAxisAngle</ref>(</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*q,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*axis,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a40f1e286c016046d93b898a615a50d1d" kindref="member">aiQuaternionFromNormalizedQuaternion</ref>(</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*q,</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>*normalized);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1177"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1ac0c4d303f2bc7a2c709c77b37ff8642e" kindref="member">aiQuaternionAreEqual</ref>(</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*a,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*b);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1189"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1acfe60c5a39046c23735f56efb3fd2599" kindref="member">aiQuaternionAreEqualEpsilon</ref>(</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*a,</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*b,</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>epsilon);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1198"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a688b5b7f8c0ea71ee69cca9760363b85" kindref="member">aiQuaternionNormalize</ref>(</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*q);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a7f95379c84b89a71039ef7d2f1f48ade" kindref="member">aiQuaternionConjugate</ref>(</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*q);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a68b266354ba787b887edbb2197d5ec38" kindref="member">aiQuaternionMultiply</ref>(</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*q);</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cimport_8h_1a737dbdbfe30cf5cde4cd7ff52bd5e0ad" kindref="member">aiQuaternionInterpolate</ref>(</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*start,</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_quaterniont" kindref="compound">aiQuaternion</ref><sp/>*end,</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>factor);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>AI_ASSIMP_H_INC</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/assimp/cimport.h"/>
  </compounddef>
</doxygen>
