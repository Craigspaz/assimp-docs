<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_assimp_1_1_formatter_1_1basic__formatter" kind="class" language="C++" prot="public">
    <compoundname>Assimp::Formatter::basic_formatter</compoundname>
    <includes local="no">TinyFormatter.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>typename CharTraits</type>
        <defval>std::char_traits&lt;T&gt;</defval>
      </param>
      <param>
        <type>typename Allocator</type>
        <defval>std::allocator&lt;T&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_assimp_1_1_formatter_1_1basic__formatter_1a042b4efff58459458b9243054b9866cd" prot="public" static="no">
        <type>class std::basic_string&lt; T, CharTraits, Allocator &gt;</type>
        <definition>typedef class std::basic_string&lt; T, CharTraits, Allocator &gt; Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::string</definition>
        <argsstring></argsstring>
        <name>string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="163" column="25" bodyfile="include/assimp/TinyFormatter.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_assimp_1_1_formatter_1_1basic__formatter_1a8a3c7f10d2b611930006a28d10d1d3ed" prot="public" static="no">
        <type>class std::basic_ostringstream&lt; T, CharTraits, Allocator &gt;</type>
        <definition>typedef class std::basic_ostringstream&lt; T, CharTraits, Allocator &gt; Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::stringstream</definition>
        <argsstring></argsstring>
        <name>stringstream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="163" column="25" bodyfile="include/assimp/TinyFormatter.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_assimp_1_1_formatter_1_1basic__formatter_1aa62813206cf972a5439d7e55114d8c0f" prot="private" static="no" mutable="yes">
        <type><ref refid="class_assimp_1_1_formatter_1_1basic__formatter_1a8a3c7f10d2b611930006a28d10d1d3ed" kindref="member">stringstream</ref></type>
        <definition>stringstream Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::underlying</definition>
        <argsstring></argsstring>
        <name>underlying</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="158" column="26" bodyfile="include/assimp/TinyFormatter.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1a776fa28fff95ff621757724c9bbe8882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::basic_formatter</definition>
        <argsstring>()</argsstring>
        <name>basic_formatter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="79" column="5" bodyfile="include/assimp/TinyFormatter.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1aba1a914c76cef73736a12739622991f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::basic_formatter</definition>
        <argsstring>(basic_formatter &amp;&amp;other)</argsstring>
        <name>basic_formatter</name>
        <param>
          <type><ref refid="class_assimp_1_1_formatter_1_1basic__formatter" kindref="compound">basic_formatter</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="98" column="5" bodyfile="include/assimp/TinyFormatter.h" bodystart="98" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1aba0675631724e150316de1457acc0395" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::basic_formatter</definition>
        <argsstring>(const basic_formatter &amp;other)</argsstring>
        <name>basic_formatter</name>
        <param>
          <type>const <ref refid="class_assimp_1_1_formatter_1_1basic__formatter" kindref="compound">basic_formatter</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="109" column="14" bodyfile="include/assimp/TinyFormatter.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1a7d1da702030a65573f55998b82bbdfe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TT</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::basic_formatter</definition>
        <argsstring>(const TT &amp;sin)</argsstring>
        <name>basic_formatter</name>
        <param>
          <type>const TT &amp;</type>
          <declname>sin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="87" column="5" bodyfile="include/assimp/TinyFormatter.h" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1a99a87f515dbc7f453bff1f16cd7c504b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::operator string</definition>
        <argsstring>() const</argsstring>
        <name>operator string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="114" column="5" bodyfile="include/assimp/TinyFormatter.h" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1a3503417c40ad2fd1e42c17ca68059a30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TToken</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_assimp_1_1_formatter_1_1basic__formatter" kindref="compound">basic_formatter</ref> &amp;</type>
        <definition>basic_formatter&amp; Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::operator,</definition>
        <argsstring>(const TToken &amp;s)</argsstring>
        <name>operator,</name>
        <param>
          <type>const TToken &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="143" column="21" bodyfile="include/assimp/TinyFormatter.h" bodystart="143" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1a6fc3a949804943d8a053a55b0ea2bd70" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TToken</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="class_assimp_1_1_formatter_1_1basic__formatter" kindref="compound">basic_formatter</ref> &amp;</type>
        <definition>const basic_formatter&amp; Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::operator,</definition>
        <argsstring>(const TToken &amp;s) const</argsstring>
        <name>operator,</name>
        <param>
          <type>const TToken &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="137" column="27" bodyfile="include/assimp/TinyFormatter.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1a46ae57770da014023a1cffb0cafe0f51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TToken</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_assimp_1_1_formatter_1_1basic__formatter" kindref="compound">basic_formatter</ref> &amp;</type>
        <definition>basic_formatter&amp; Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::operator,</definition>
        <argsstring>(TToken &amp;s)</argsstring>
        <name>operator,</name>
        <param>
          <type>TToken &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="151" column="21" bodyfile="include/assimp/TinyFormatter.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1a7bb921e0b9a62efe237a2e23626d1f60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TToken</type>
          </param>
        </templateparamlist>
        <type><ref refid="class_assimp_1_1_formatter_1_1basic__formatter" kindref="compound">basic_formatter</ref> &amp;</type>
        <definition>basic_formatter&amp; Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::operator&lt;&lt;</definition>
        <argsstring>(const TToken &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const TToken &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="129" column="5" bodyfile="include/assimp/TinyFormatter.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_formatter_1_1basic__formatter_1ac433a014f29674f638923e982b528cac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TToken</type>
          </param>
        </templateparamlist>
        <type>const <ref refid="class_assimp_1_1_formatter_1_1basic__formatter" kindref="compound">basic_formatter</ref> &amp;</type>
        <definition>const basic_formatter&amp; Assimp::Formatter::basic_formatter&lt; T, CharTraits, Allocator &gt;::operator&lt;&lt;</definition>
        <argsstring>(const TToken &amp;s) const</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const TToken &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/TinyFormatter.h" line="123" column="11" bodyfile="include/assimp/TinyFormatter.h" bodystart="123" bodyend="126"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>stringstream utility. </para>
    </briefdescription>
    <detaileddescription>
<para>Usage: <programlisting><codeline><highlight class="normal">void<sp/>writelog(const<sp/>std::string&amp;s);</highlight></codeline>
<codeline><highlight class="normal">void<sp/>writelog(const<sp/>std::wstring&amp;s);</highlight></codeline>
<codeline><highlight class="normal">...</highlight></codeline>
<codeline><highlight class="normal">writelog(format()&lt;&lt;<sp/>&quot;hi!<sp/>this<sp/>is<sp/>a<sp/>number:<sp/>&quot;<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">writelog(wformat()&lt;&lt;<sp/>L&quot;hi!<sp/>this<sp/>is<sp/>a<sp/>number:<sp/>&quot;<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="include/assimp/TinyFormatter.h" line="74" column="1" bodyfile="include/assimp/TinyFormatter.h" bodystart="74" bodyend="159"/>
    <listofallmembers>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1a776fa28fff95ff621757724c9bbe8882" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>basic_formatter</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1a7d1da702030a65573f55998b82bbdfe6" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>basic_formatter</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1aba1a914c76cef73736a12739622991f2" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>basic_formatter</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1aba0675631724e150316de1457acc0395" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>basic_formatter</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1a99a87f515dbc7f453bff1f16cd7c504b" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>operator string</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1a6fc3a949804943d8a053a55b0ea2bd70" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>operator,</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1a3503417c40ad2fd1e42c17ca68059a30" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>operator,</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1a46ae57770da014023a1cffb0cafe0f51" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>operator,</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1ac433a014f29674f638923e982b528cac" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1a7bb921e0b9a62efe237a2e23626d1f60" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>operator&lt;&lt;</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1a042b4efff58459458b9243054b9866cd" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>string</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1a8a3c7f10d2b611930006a28d10d1d3ed" prot="public" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>stringstream</name></member>
      <member refid="class_assimp_1_1_formatter_1_1basic__formatter_1aa62813206cf972a5439d7e55114d8c0f" prot="private" virt="non-virtual"><scope>Assimp::Formatter::basic_formatter</scope><name>underlying</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
