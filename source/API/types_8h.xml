<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="types_8h" kind="file" language="C++">
    <compoundname>types.h</compoundname>
    <includes local="no">limits.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes refid="defs_8h" local="no">assimp/defs.h</includes>
    <includes refid="vector2_8h" local="no">assimp/vector2.h</includes>
    <includes refid="vector3_8h" local="no">assimp/vector3.h</includes>
    <includes refid="color4_8h" local="no">assimp/color4.h</includes>
    <includes refid="matrix3x3_8h" local="no">assimp/matrix3x3.h</includes>
    <includes refid="matrix4x4_8h" local="no">assimp/matrix4x4.h</includes>
    <includes refid="quaternion_8h" local="no">assimp/quaternion.h</includes>
    <includes local="no">cstring</includes>
    <includes local="no">new</includes>
    <includes local="no">string</includes>
    <includedby refid="anim_8h" local="no">anim.h</includedby>
    <includedby refid="_base_importer_8h" local="no">BaseImporter.h</includedby>
    <includedby refid="_byte_swapper_8h" local="no">ByteSwapper.h</includedby>
    <includedby refid="camera_8h" local="yes">camera.h</includedby>
    <includedby refid="cexport_8h" local="no">cexport.h</includedby>
    <includedby refid="cfileio_8h" local="no">cfileio.h</includedby>
    <includedby refid="cimport_8h" local="no">cimport.h</includedby>
    <includedby refid="_importer_8hpp" local="no">Importer.hpp</includedby>
    <includedby refid="importerdesc_8h" local="no">importerdesc.h</includedby>
    <includedby refid="_i_o_stream_8hpp" local="no">IOStream.hpp</includedby>
    <includedby refid="_i_o_stream_buffer_8h" local="no">IOStreamBuffer.h</includedby>
    <includedby refid="_i_o_system_8hpp" local="yes">IOSystem.hpp</includedby>
    <includedby refid="light_8h" local="no">light.h</includedby>
    <includedby refid="_logger_8hpp" local="no">Logger.hpp</includedby>
    <includedby refid="_log_stream_8hpp" local="yes">LogStream.hpp</includedby>
    <includedby refid="material_8h" local="no">material.h</includedby>
    <includedby refid="mesh_8h" local="no">mesh.h</includedby>
    <includedby refid="postprocess_8h" local="no">postprocess.h</includedby>
    <includedby refid="_progress_handler_8hpp" local="no">ProgressHandler.hpp</includedby>
    <includedby refid="scene_8h" local="no">scene.h</includedby>
    <includedby refid="_scene_combiner_8h" local="no">SceneCombiner.h</includedby>
    <includedby refid="_s_g_spatial_sort_8h" local="no">SGSpatialSort.h</includedby>
    <includedby refid="_spatial_sort_8h" local="no">SpatialSort.h</includedby>
    <includedby refid="_subdivision_8h" local="no">Subdivision.h</includedby>
    <includedby refid="texture_8h" local="no">texture.h</includedby>
    <incdepgraph>
      <node id="14">
        <label>assimp/matrix4x4.h</label>
        <link refid="matrix4x4_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>assimp/vector3.h</label>
        <link refid="vector3_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>assimp/matrix3x3.h</label>
        <link refid="matrix3x3_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="8">
        <label>assimp/config.h</label>
        <link refid="config_8h"/>
      </node>
      <node id="2">
        <label>limits.h</label>
      </node>
      <node id="6">
        <label>sys/types.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="15">
        <label>assimp/quaternion.h</label>
        <link refid="quaternion_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>assimp/defs.h</label>
        <link refid="defs_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>new</label>
      </node>
      <node id="12">
        <label>assimp/color4.h</label>
        <link refid="color4_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>assimp/vector2.h</label>
        <link refid="vector2_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="25">
        <label>MemoryIOWrapper.h</label>
        <link refid="_memory_i_o_wrapper_8h"/>
      </node>
      <node id="46">
        <label>SpatialSort.h</label>
        <link refid="_spatial_sort_8h"/>
      </node>
      <node id="17">
        <label>GenericProperty.h</label>
        <link refid="_generic_property_8h"/>
      </node>
      <node id="30">
        <label>Logger.hpp</label>
        <link refid="_logger_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ByteSwapper.h</label>
        <link refid="_byte_swapper_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>BaseImporter.h</label>
        <link refid="_base_importer_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>material.h</label>
        <link refid="material_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>BlobIOSystem.h</label>
        <link refid="_blob_i_o_system_8h"/>
      </node>
      <node id="18">
        <label>importerdesc.h</label>
        <link refid="importerdesc_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>LogAux.h</label>
        <link refid="_log_aux_8h"/>
      </node>
      <node id="38">
        <label>SkeletonMeshBuilder.h</label>
        <link refid="_skeleton_mesh_builder_8h"/>
      </node>
      <node id="29">
        <label>light.h</label>
        <link refid="light_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>cfileio.h</label>
        <link refid="cfileio_8h"/>
      </node>
      <node id="10">
        <label>camera.h</label>
        <link refid="camera_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>SceneCombiner.h</label>
        <link refid="_scene_combiner_8h"/>
      </node>
      <node id="1">
        <label>types.h</label>
        <link refid="types_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>IOStream.hpp</label>
        <link refid="_i_o_stream_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>CreateAnimMesh.h</label>
        <link refid="_create_anim_mesh_8h"/>
      </node>
      <node id="8">
        <label>LineSplitter.h</label>
        <link refid="_line_splitter_8h"/>
      </node>
      <node id="7">
        <label>StreamReader.h</label>
        <link refid="_stream_reader_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Profiler.h</label>
        <link refid="_profiler_8h"/>
      </node>
      <node id="24">
        <label>IOStreamBuffer.h</label>
        <link refid="_i_o_stream_buffer_8h"/>
      </node>
      <node id="13">
        <label>Exporter.hpp</label>
        <link refid="_exporter_8hpp"/>
      </node>
      <node id="19">
        <label>DefaultIOStream.h</label>
        <link refid="_default_i_o_stream_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>SGSpatialSort.h</label>
        <link refid="_s_g_spatial_sort_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>anim.h</label>
        <link refid="anim_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>NullLogger.hpp</label>
        <link refid="_null_logger_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>SmoothingGroups.inl</label>
        <link refid="_smoothing_groups_8inl"/>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>Exceptional.h</label>
        <link refid="_exceptional_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>LogStream.hpp</label>
        <link refid="_log_stream_8hpp"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>texture.h</label>
        <link refid="texture_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>cimport.h</label>
        <link refid="cimport_8h"/>
      </node>
      <node id="39">
        <label>Vertex.h</label>
        <link refid="_vertex_8h"/>
      </node>
      <node id="28">
        <label>DefaultIOSystem.h</label>
        <link refid="_default_i_o_system_8h"/>
      </node>
      <node id="21">
        <label>fast_atof.h</label>
        <link refid="fast__atof_8h"/>
      </node>
      <node id="26">
        <label>ZipArchiveIOSystem.h</label>
        <link refid="_zip_archive_i_o_system_8h"/>
      </node>
      <node id="41">
        <label>ProgressHandler.hpp</label>
        <link refid="_progress_handler_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>StreamWriter.h</label>
        <link refid="_stream_writer_8h"/>
      </node>
      <node id="27">
        <label>IOSystem.hpp</label>
        <link refid="_i_o_system_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>scene.h</label>
        <link refid="scene_8h"/>
      </node>
      <node id="16">
        <label>Importer.hpp</label>
        <link refid="_importer_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>postprocess.h</label>
        <link refid="postprocess_8h"/>
      </node>
      <node id="45">
        <label>SmoothingGroups.h</label>
        <link refid="_smoothing_groups_8h"/>
      </node>
      <node id="36">
        <label>mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>XmlParser.h</label>
        <link refid="_xml_parser_8h"/>
      </node>
      <node id="11">
        <label>cexport.h</label>
        <link refid="cexport_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>DefaultLogger.hpp</label>
        <link refid="_default_logger_8hpp"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>Subdivision.h</label>
        <link refid="_subdivision_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structai_color3_d" prot="public">aiColor3D</innerclass>
    <innerclass refid="structai_memory_info" prot="public">aiMemoryInfo</innerclass>
    <innerclass refid="structai_plane" prot="public">aiPlane</innerclass>
    <innerclass refid="structai_ray" prot="public">aiRay</innerclass>
    <innerclass refid="structai_string" prot="public">aiString</innerclass>
    <innernamespace refid="namespace_assimp">Assimp</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="types_8h_1adbb64cf2e4123702dfe6ce60e984d346" prot="public" static="no">
        <name>AI_TYPES_H_INC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/types.h" line="47" column="9" bodyfile="include/assimp/types.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6" prot="public" static="no" strong="no">
        <type></type>
        <name>aiDefaultLogStream</name>
        <enumvalue id="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6a53f81f9d36437ced72e67b297dc17815" prot="public">
          <name>aiDefaultLogStream_FILE</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
<para>Stream the log to a file. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6a215b1796e410eed0b7ce1944ac54e72e" prot="public">
          <name>aiDefaultLogStream_STDOUT</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
<para>Stream the log to std::cout. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6a3e0052f70e0098160739ee06c7f59048" prot="public">
          <name>aiDefaultLogStream_STDERR</name>
          <initializer>= 0x4</initializer>
          <briefdescription>
<para>Stream the log to std::cerr. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6a424869369b939e649decec5cea6bb52c" prot="public">
          <name>aiDefaultLogStream_DEBUGGER</name>
          <initializer>= 0x8</initializer>
          <briefdescription>
<para>MSVC only: Stream the log the the debugger (this relies on OutputDebugString from the Win32 SDK) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumerates predefined log streaming destinations. </para>
        </briefdescription>
        <detaileddescription>
<para>Logging to these streams can be enabled with a single call to #LogStream::createDefaultStream. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/types.h" line="452" column="1" bodyfile="include/assimp/types.h" bodystart="452" bodyend="472"/>
      </memberdef>
      <memberdef kind="enum" id="types_8h_1ac50fbaa57d78776ca99e42104d9b2786" prot="public" static="no" strong="no">
        <type></type>
        <name>aiOrigin</name>
        <enumvalue id="types_8h_1ac50fbaa57d78776ca99e42104d9b2786a94a44e681b6c891e39767c518b64b56f" prot="public">
          <name>aiOrigin_SET</name>
          <initializer>= 0x0</initializer>
          <briefdescription>
<para>Beginning of the file. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1ac50fbaa57d78776ca99e42104d9b2786a34f9f30078835fdb09212bf69d5ebb36" prot="public">
          <name>aiOrigin_CUR</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
<para>Current position of the file pointer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1ac50fbaa57d78776ca99e42104d9b2786a88929c7834e2026ab642fd84bea2fec7" prot="public">
          <name>aiOrigin_END</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
<para>End of the file, offsets must be negative. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Seek origins (for the virtual file system API). </para>
        </briefdescription>
        <detaileddescription>
<para>Much cooler than using SEEK_SET, SEEK_CUR or SEEK_END. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/types.h" line="429" column="1" bodyfile="include/assimp/types.h" bodystart="429" bodyend="445"/>
      </memberdef>
      <memberdef kind="enum" id="types_8h_1a1f78dfb65090aa930cabb984c8abe711" prot="public" static="no" strong="no">
        <type></type>
        <name>aiReturn</name>
        <enumvalue id="types_8h_1a1f78dfb65090aa930cabb984c8abe711a7bde061360634cbb833c7b5199cc9a86" prot="public">
          <name>aiReturn_SUCCESS</name>
          <initializer>= 0x0</initializer>
          <briefdescription>
<para>Indicates that a function was successful. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1a1f78dfb65090aa930cabb984c8abe711a2c3ac03541b60141d29673edd7220e76" prot="public">
          <name>aiReturn_FAILURE</name>
          <initializer>= -0x1</initializer>
          <briefdescription>
<para>Indicates that a function failed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="types_8h_1a1f78dfb65090aa930cabb984c8abe711aec066535964aaa165dd72815ade727f1" prot="public">
          <name>aiReturn_OUTOFMEMORY</name>
          <initializer>= -0x3</initializer>
          <briefdescription>
<para>Indicates that not enough memory was available to perform the requested operation. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Standard return type for some library functions. </para>
        </briefdescription>
        <detaileddescription>
<para>Rarely used, and if, mostly in the C API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/types.h" line="400" column="1" bodyfile="include/assimp/types.h" bodystart="400" bodyend="418"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="types_8h_1a3ae7f34c2ad2e1575490615c3504e84f" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t ai_int32</definition>
        <argsstring></argsstring>
        <name>ai_int32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/types.h" line="71" column="17" bodyfile="include/assimp/types.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types_8h_1a62b54a3ae3ae350c86fe848e22cb5b0a" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t ai_uint32</definition>
        <argsstring></argsstring>
        <name>ai_uint32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/types.h" line="72" column="18" bodyfile="include/assimp/types.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="types_8h_1a62cd28a234de9b546f2e22997e92f3de" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t MAXLEN</definition>
        <argsstring></argsstring>
        <name>MAXLEN</name>
        <initializer>= 1024</initializer>
        <briefdescription>
<para>Maximum dimension for strings, ASSIMP strings are zero terminated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/types.h" line="121" column="21" bodyfile="include/assimp/types.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Basic data types and primitives, such as vectors or colors. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">---------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="3"><highlight class="comment">Open<sp/>Asset<sp/>Import<sp/>Library<sp/>(assimp)</highlight></codeline>
<codeline lineno="4"><highlight class="comment">---------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">Copyright<sp/>(c)<sp/>2006-2021,<sp/>assimp<sp/>team</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>of<sp/>this<sp/>software<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">with<sp/>or<sp/>without<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="12"><highlight class="comment">conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>assimp<sp/>team,<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>written<sp/>permission<sp/>of<sp/>the<sp/>assimp<sp/>team.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight></codeline>
<codeline lineno="28"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="29"><highlight class="comment">&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="30"><highlight class="comment">LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="31"><highlight class="comment">A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight></codeline>
<codeline lineno="32"><highlight class="comment">OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight></codeline>
<codeline lineno="33"><highlight class="comment">SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="34"><highlight class="comment">LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight></codeline>
<codeline lineno="35"><highlight class="comment">DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight></codeline>
<codeline lineno="36"><highlight class="comment">THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="37"><highlight class="comment">(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight></codeline>
<codeline lineno="38"><highlight class="comment">OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="39"><highlight class="comment">---------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="40"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>AI_TYPES_H_INC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AI_TYPES_H_INC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>system_header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>runtime<sp/>headers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Our<sp/>compile<sp/>configuration</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="defs_8h" kindref="compound">assimp/defs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>types<sp/>moved<sp/>to<sp/>separate<sp/>header<sp/>due<sp/>to<sp/>size<sp/>of<sp/>operators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="vector2_8h" kindref="compound">assimp/vector2.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="vector3_8h" kindref="compound">assimp/vector3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="color4_8h" kindref="compound">assimp/color4.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="matrix3x3_8h" kindref="compound">assimp/matrix3x3.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="matrix4x4_8h" kindref="compound">assimp/matrix4x4.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="quaternion_8h" kindref="compound">assimp/quaternion.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int32_t<sp/><ref refid="types_8h_1a3ae7f34c2ad2e1575490615c3504e84f" kindref="member">ai_int32</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="types_8h_1a62b54a3ae3ae350c86fe848e22cb5b0a" kindref="member">ai_uint32</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;new&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>std::nothrow_t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>aiString::Set(const<sp/>std::string&amp;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_assimp" kindref="compound">Assimp</ref><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Intern<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight></codeline>
<codeline lineno="95"><highlight class="comment"></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SWIG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="defs_8h_1a7d617d307e656cb6ff315ba71ff958d4" kindref="member">ASSIMP_API</ref><sp/>AllocateFromAssimpHeap<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>http://www.gotw.ca/publications/mill15.htm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new/delete<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_bytes)<sp/></highlight><highlight class="comment">/*<sp/>throw(<sp/>std::bad_alloc<sp/>)<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_bytes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::nothrow_t<sp/>&amp;)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>array<sp/>new/delete<sp/>overload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_bytes)<sp/></highlight><highlight class="comment">/*<sp/>throw(<sp/>std::bad_alloc<sp/>)<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_bytes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::nothrow_t<sp/>&amp;)<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>struct<sp/>AllocateFromAssimpHeap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Intern</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Assimp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAXLEN<sp/>1024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="129" refid="structai_plane" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structai_plane" kindref="compound">aiPlane</ref><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_plane_1aa87e222dda0b737ea32135ced62ecbc0" kindref="member">aiPlane</ref>()<sp/><ref refid="defs_8h_1ae032f18edd69bf6ba935ef9feb025a96" kindref="member">AI_NO_EXCEPT</ref><sp/>:<sp/><ref refid="structai_plane_1a0e2f46be0d810fef7633c9d4b77c5556" kindref="member">a</ref>(0.f),<sp/><ref refid="structai_plane_1aac7052fbb5bb20714031a65c9cc5865d" kindref="member">b</ref>(0.f),<sp/><ref refid="structai_plane_1a5640a9648412543e704c0a8f4623a401" kindref="member">c</ref>(0.f),<sp/><ref refid="structai_plane_1a3a1fee6c44184dfd0bba7f82deae1dd2" kindref="member">d</ref>(0.f)<sp/>{}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_plane_1aa87e222dda0b737ea32135ced62ecbc0" kindref="member">aiPlane</ref>(<ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>_a,<sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>_b,<sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>_c,<sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>_d)<sp/>:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_plane_1a0e2f46be0d810fef7633c9d4b77c5556" kindref="member">a</ref>(_a),<sp/><ref refid="structai_plane_1aac7052fbb5bb20714031a65c9cc5865d" kindref="member">b</ref>(_b),<sp/><ref refid="structai_plane_1a5640a9648412543e704c0a8f4623a401" kindref="member">c</ref>(_c),<sp/><ref refid="structai_plane_1a3a1fee6c44184dfd0bba7f82deae1dd2" kindref="member">d</ref>(_d)<sp/>{}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_plane_1aa87e222dda0b737ea32135ced62ecbc0" kindref="member">aiPlane</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_plane" kindref="compound">aiPlane</ref><sp/>&amp;o)<sp/>:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_plane_1a0e2f46be0d810fef7633c9d4b77c5556" kindref="member">a</ref>(o.<ref refid="structai_plane_1a0e2f46be0d810fef7633c9d4b77c5556" kindref="member">a</ref>),<sp/><ref refid="structai_plane_1aac7052fbb5bb20714031a65c9cc5865d" kindref="member">b</ref>(o.<ref refid="structai_plane_1aac7052fbb5bb20714031a65c9cc5865d" kindref="member">b</ref>),<sp/><ref refid="structai_plane_1a5640a9648412543e704c0a8f4623a401" kindref="member">c</ref>(o.<ref refid="structai_plane_1a5640a9648412543e704c0a8f4623a401" kindref="member">c</ref>),<sp/><ref refid="structai_plane_1a3a1fee6c44184dfd0bba7f82deae1dd2" kindref="member">d</ref>(o.<ref refid="structai_plane_1a3a1fee6c44184dfd0bba7f82deae1dd2" kindref="member">d</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/><ref refid="structai_plane_1a0e2f46be0d810fef7633c9d4b77c5556" kindref="member">a</ref>,<sp/><ref refid="structai_plane_1aac7052fbb5bb20714031a65c9cc5865d" kindref="member">b</ref>,<sp/><ref refid="structai_plane_1a5640a9648412543e704c0a8f4623a401" kindref="member">c</ref>,<sp/><ref refid="structai_plane_1a3a1fee6c44184dfd0bba7f82deae1dd2" kindref="member">d</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>!struct<sp/>aiPlane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="147" refid="structai_ray" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structai_ray" kindref="compound">aiRay</ref><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_ray_1a2b2aa06242fbc6bee0316ca98a755f38" kindref="member">aiRay</ref>()<sp/><ref refid="defs_8h_1ae032f18edd69bf6ba935ef9feb025a96" kindref="member">AI_NO_EXCEPT</ref><sp/>{}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_ray_1a2b2aa06242fbc6bee0316ca98a755f38" kindref="member">aiRay</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>&amp;_pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/>&amp;_dir)<sp/>:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_ray_1a312f663a7d2580b1b3beb52ffd4ab4c9" kindref="member">pos</ref>(_pos),<sp/><ref refid="structai_ray_1a635d9120af2654716e5e7952d837282b" kindref="member">dir</ref>(_dir)<sp/>{}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_ray_1a2b2aa06242fbc6bee0316ca98a755f38" kindref="member">aiRay</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_ray" kindref="compound">aiRay</ref><sp/>&amp;o)<sp/>:</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_ray_1a312f663a7d2580b1b3beb52ffd4ab4c9" kindref="member">pos</ref>(o.<ref refid="structai_ray_1a312f663a7d2580b1b3beb52ffd4ab4c9" kindref="member">pos</ref>),<sp/><ref refid="structai_ray_1a635d9120af2654716e5e7952d837282b" kindref="member">dir</ref>(o.<ref refid="structai_ray_1a635d9120af2654716e5e7952d837282b" kindref="member">dir</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="defs_8h_1ab51df4230ceb602bbc1bc109c432a6a0" kindref="member">C_STRUCT</ref><sp/><ref refid="classai_vector3t" kindref="compound">aiVector3D</ref><sp/><ref refid="structai_ray_1a312f663a7d2580b1b3beb52ffd4ab4c9" kindref="member">pos</ref>,<sp/><ref refid="structai_ray_1a635d9120af2654716e5e7952d837282b" kindref="member">dir</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>!struct<sp/>aiRay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="165" refid="structai_color3_d" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_color3_d_1a443acfb588b0b5d2ef2e8b67328acf5f" kindref="member">aiColor3D</ref>()<sp/><ref refid="defs_8h_1ae032f18edd69bf6ba935ef9feb025a96" kindref="member">AI_NO_EXCEPT</ref><sp/>:<sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>(0.0f),<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>(0.0f),<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>(0.0f)<sp/>{}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_color3_d_1a443acfb588b0b5d2ef2e8b67328acf5f" kindref="member">aiColor3D</ref>(<ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>_r,<sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>_g,<sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>_b)<sp/>:</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>(_r),<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>(_g),<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>(_b)<sp/>{}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a443acfb588b0b5d2ef2e8b67328acf5f" kindref="member">aiColor3D</ref>(<ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>_r)<sp/>:</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>(_r),<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>(_r),<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>(_r)<sp/>{}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_color3_d_1a443acfb588b0b5d2ef2e8b67328acf5f" kindref="member">aiColor3D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>&amp;o)<sp/>:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>(o.<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>),<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>(o.<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>),<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>(o.<ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>&amp;<ref refid="structai_color3_d_1a636411b987d81506e576481f119afc80" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>&amp;o)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>=<sp/>o.<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>=<sp/>o.<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref><sp/>=<sp/>o.<ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>epsilon?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1aa7d23bc975a0be24f9e885ba598d7bdd" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>==<sp/>other.<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>&amp;&amp;<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>==<sp/>other.<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>&amp;&amp;<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref><sp/>==<sp/>other.<ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>;<sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>epsilon?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1ac4d0b15cf15dd9621586fa707e9c3429" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>!=<sp/>other.<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>||<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>!=<sp/>other.<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>||<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref><sp/>!=<sp/>other.<ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>;<sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>add<sp/>epsilon?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1ae194db3c0c21841601a89b8f9cfa27a0" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>&lt;<sp/>other.<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>||<sp/>(<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>==<sp/>other.<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>&amp;&amp;<sp/>(<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>&lt;<sp/>other.<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>||<sp/>(<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>==<sp/>other.<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>&amp;&amp;<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref><sp/>&lt;<sp/>other.<ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>)));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/><ref refid="structai_color3_d_1aaafa123d50868c1ae8e5ed4ec1df62a8" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>&amp;c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a443acfb588b0b5d2ef2e8b67328acf5f" kindref="member">aiColor3D</ref>(<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>+<sp/>c.<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>,<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>+<sp/>c.<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>,<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref><sp/>+<sp/>c.<ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/><ref refid="structai_color3_d_1a0707d20677c02b87665a0ca3e6d2fc89" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>&amp;c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a443acfb588b0b5d2ef2e8b67328acf5f" kindref="member">aiColor3D</ref>(<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>-<sp/>c.<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>,<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>-<sp/>c.<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>,<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref><sp/>-<sp/>c.<ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/><ref refid="structai_color3_d_1ae2a0d574ddb3c3d3071d6512c8a535ae" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/>&amp;c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a443acfb588b0b5d2ef2e8b67328acf5f" kindref="member">aiColor3D</ref>(<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>*<sp/>c.<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>,<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>*<sp/>c.<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>,<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref><sp/>*<sp/>c.<ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_color3_d" kindref="compound">aiColor3D</ref><sp/><ref refid="structai_color3_d_1ae2a0d574ddb3c3d3071d6512c8a535ae" kindref="member">operator*</ref>(<ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>f)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a443acfb588b0b5d2ef2e8b67328acf5f" kindref="member">aiColor3D</ref>(<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>*<sp/>f,<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref><sp/>*<sp/>f,<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref><sp/>*<sp/>f);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/><ref refid="structai_color3_d_1a3aa260c7342cc25b58adc1b71ef01d3a" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(&amp;<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref><sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>&amp;<ref refid="structai_color3_d_1a3aa260c7342cc25b58adc1b71ef01d3a" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(1<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(2<sp/>==<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structai_color3_d_1a749bf8921bd3d2958d59c0f033488639" kindref="member">IsBlack</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/>epsilon<sp/>=<sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref>(10e-3);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::fabs(<ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>)<sp/>&lt;<sp/>epsilon<sp/>&amp;&amp;<sp/>std::fabs(<ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>)<sp/>&lt;<sp/>epsilon<sp/>&amp;&amp;<sp/>std::fabs(<ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>)<sp/>&lt;<sp/>epsilon;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="defs_8h_1af221f9bbc3e0dc43a46efaaac6dab067" kindref="member">ai_real</ref><sp/><ref refid="structai_color3_d_1a9244c589dc4c8d95e4107951f2a9a386" kindref="member">r</ref>,<sp/><ref refid="structai_color3_d_1a1d0d24589ceb621da76b550a347859a5" kindref="member">g</ref>,<sp/><ref refid="structai_color3_d_1a6ddfc96e5a77a1277687021494fbe844" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>!struct<sp/>aiColor3D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="266" refid="structai_string" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structai_string" kindref="compound">aiString</ref><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_string_1a05c8eff36c3868199a7263b6d6b39b47" kindref="member">aiString</ref>()<sp/><ref refid="defs_8h_1ae032f18edd69bf6ba935ef9feb025a96" kindref="member">AI_NO_EXCEPT</ref></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>(0)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ASSIMP_BUILD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Debug<sp/>build:<sp/>overwrite<sp/>the<sp/>string<sp/>on<sp/>its<sp/>full<sp/>length<sp/>with<sp/>ESC<sp/>(27)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref><sp/>+<sp/>1,<sp/>27,<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_string_1a05c8eff36c3868199a7263b6d6b39b47" kindref="member">aiString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_string" kindref="compound">aiString</ref><sp/>&amp;rOther)<sp/>:</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>(rOther.<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Crop<sp/>the<sp/>string<sp/>to<sp/>the<sp/>maximum<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>=<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>&gt;=<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>?<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>-<sp/>1<sp/>:<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/>rOther.<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>[<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structai_string_1a05c8eff36c3868199a7263b6d6b39b47" kindref="member">aiString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;pString)<sp/>:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>((<ref refid="types_8h_1a62b54a3ae3ae350c86fe848e22cb5b0a" kindref="member">ai_uint32</ref>)pString.length())<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>=<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>&gt;=<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>?<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>-<sp/>1<sp/>:<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/>pString.c_str(),<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>[<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structai_string_1aea4f745fc87cc28175dbc3b7e33411f0" kindref="member">Set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;pString)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pString.length()<sp/>&gt;<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>=<sp/>(<ref refid="types_8h_1a62b54a3ae3ae350c86fe848e22cb5b0a" kindref="member">ai_uint32</ref>)pString.length();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/>pString.c_str(),<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>[<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structai_string_1aea4f745fc87cc28175dbc3b7e33411f0" kindref="member">Set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sz)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="types_8h_1a3ae7f34c2ad2e1575490615c3504e84f" kindref="member">ai_int32</ref><sp/>len<sp/>=<sp/>(<ref refid="types_8h_1a62b54a3ae3ae350c86fe848e22cb5b0a" kindref="member">ai_uint32</ref>)::strlen(sz);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>(<ref refid="types_8h_1a3ae7f34c2ad2e1575490615c3504e84f" kindref="member">ai_int32</ref>)<ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>(<ref refid="types_8h_1a3ae7f34c2ad2e1575490615c3504e84f" kindref="member">ai_int32</ref>)<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/>sz,<sp/>len);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_string" kindref="compound">aiString</ref><sp/>&amp;<ref refid="structai_string_1afd3945aafa4bb32101cce6a9024c65b0" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_string" kindref="compound">aiString</ref><sp/>&amp;rOther)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;rOther)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>=<sp/>rOther.<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>&gt;(<ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>=<sp/>(<ref refid="types_8h_1a3ae7f34c2ad2e1575490615c3504e84f" kindref="member">ai_int32</ref>)<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/>rOther.<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>[<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_string" kindref="compound">aiString</ref><sp/>&amp;<ref refid="structai_string_1afd3945aafa4bb32101cce6a9024c65b0" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sz)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aea4f745fc87cc28175dbc3b7e33411f0" kindref="member">Set</ref>(sz);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_string" kindref="compound">aiString</ref><sp/>&amp;<ref refid="structai_string_1afd3945aafa4bb32101cce6a9024c65b0" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;pString)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aea4f745fc87cc28175dbc3b7e33411f0" kindref="member">Set</ref>(pString);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structai_string_1ad4f052a18a0ee4e7fab8a254c009b969" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_string" kindref="compound">aiString</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>==<sp/>other.<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>&amp;&amp;<sp/>0<sp/>==<sp/>memcmp(<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/>other.<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structai_string_1a292dadc0d6e2e0577925fa625c0e5558" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structai_string" kindref="compound">aiString</ref><sp/>&amp;other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>!=<sp/>other.<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>||<sp/>0<sp/>!=<sp/>memcmp(<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/>other.<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>,<sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structai_string_1a9ed045854a503b2e414ee7c756e39a6e" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*app)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a62b54a3ae3ae350c86fe848e22cb5b0a" kindref="member">ai_uint32</ref><sp/>len<sp/>=<sp/>(<ref refid="types_8h_1a62b54a3ae3ae350c86fe848e22cb5b0a" kindref="member">ai_uint32</ref>)::strlen(app);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!len)<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>+<sp/>len<sp/>&gt;=<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>[<ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>],<sp/>app,<sp/>len<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structai_string_1aa51cd987f420804340c75fd929b25b4d" kindref="member">Clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>ASSIMP_BUILD_DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Debug<sp/>build:<sp/>overwrite<sp/>the<sp/>string<sp/>on<sp/>its<sp/>full<sp/>length<sp/>with<sp/>ESC<sp/>(27)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(<ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref><sp/>+<sp/>1,<sp/>27,<sp/><ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="structai_string_1a9cf5865516f6cb96df25c833d3fdfef0" kindref="member">C_Str</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a62b54a3ae3ae350c86fe848e22cb5b0a" kindref="member">ai_uint32</ref><sp/><ref refid="structai_string_1aed051e2996a96ca3a53e069f9b93da0c" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structai_string_1aa90b1da7d347a3dcca0a95061e6ea41d" kindref="member">data</ref>[<ref refid="types_8h_1a62cd28a234de9b546f2e22997e92f3de" kindref="member">MAXLEN</ref>];</highlight></codeline>
<codeline lineno="394"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>!struct<sp/>aiString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="400"><highlight class="comment"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="types_8h_1a1f78dfb65090aa930cabb984c8abe711" kindref="member">aiReturn</ref><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a1f78dfb65090aa930cabb984c8abe711a7bde061360634cbb833c7b5199cc9a86" kindref="member">aiReturn_SUCCESS</ref><sp/>=<sp/>0x0,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a1f78dfb65090aa930cabb984c8abe711a2c3ac03541b60141d29673edd7220e76" kindref="member">aiReturn_FAILURE</ref><sp/>=<sp/>-0x1,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1a1f78dfb65090aa930cabb984c8abe711aec066535964aaa165dd72815ade727f1" kindref="member">aiReturn_OUTOFMEMORY</ref><sp/>=<sp/>-0x3,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>_AI_ENFORCE_ENUM_SIZE<sp/>=<sp/>0x7fffffff</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">}<sp/><ref refid="types_8h_1a1f78dfb65090aa930cabb984c8abe711" kindref="member">aiReturn</ref>;<sp/></highlight><highlight class="comment">//<sp/>!enum<sp/>aiReturn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>just<sp/>for<sp/>backwards<sp/>compatibility,<sp/>don&apos;t<sp/>use<sp/>these<sp/>constants<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AI_SUCCESS<sp/>aiReturn_SUCCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AI_FAILURE<sp/>aiReturn_FAILURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>AI_OUTOFMEMORY<sp/>aiReturn_OUTOFMEMORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="429"><highlight class="comment"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="types_8h_1ac50fbaa57d78776ca99e42104d9b2786" kindref="member">aiOrigin</ref><sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ac50fbaa57d78776ca99e42104d9b2786a94a44e681b6c891e39767c518b64b56f" kindref="member">aiOrigin_SET</ref><sp/>=<sp/>0x0,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ac50fbaa57d78776ca99e42104d9b2786a34f9f30078835fdb09212bf69d5ebb36" kindref="member">aiOrigin_CUR</ref><sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ac50fbaa57d78776ca99e42104d9b2786a88929c7834e2026ab642fd84bea2fec7" kindref="member">aiOrigin_END</ref><sp/>=<sp/>0x2,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>_AI_ORIGIN_ENFORCE_ENUM_SIZE<sp/>=<sp/>0x7fffffff</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>!enum<sp/>aiOrigin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="452"><highlight class="comment"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6" kindref="member">aiDefaultLogStream</ref><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6a53f81f9d36437ced72e67b297dc17815" kindref="member">aiDefaultLogStream_FILE</ref><sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6a215b1796e410eed0b7ce1944ac54e72e" kindref="member">aiDefaultLogStream_STDOUT</ref><sp/>=<sp/>0x2,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6a3e0052f70e0098160739ee06c7f59048" kindref="member">aiDefaultLogStream_STDERR</ref><sp/>=<sp/>0x4,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="types_8h_1ae4271f61a7c06cd4770fc3e11f58f9c6a424869369b939e649decec5cea6bb52c" kindref="member">aiDefaultLogStream_DEBUGGER</ref><sp/>=<sp/>0x8,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>_AI_DLS_ENFORCE_ENUM_SIZE<sp/>=<sp/>0x7fffffff</highlight></codeline>
<codeline lineno="472"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>!enum<sp/>aiDefaultLogStream</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">//<sp/>just<sp/>for<sp/>backwards<sp/>compatibility,<sp/>don&apos;t<sp/>use<sp/>these<sp/>constants<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DLS_FILE<sp/>aiDefaultLogStream_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DLS_STDOUT<sp/>aiDefaultLogStream_STDOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DLS_STDERR<sp/>aiDefaultLogStream_STDERR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DLS_DEBUGGER<sp/>aiDefaultLogStream_DEBUGGER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="485" refid="structai_memory_info" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structai_memory_info" kindref="compound">aiMemoryInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structai_memory_info_1ac33db49ed124ee37e8aa6da6ade03140" kindref="member">aiMemoryInfo</ref>()<sp/><ref refid="defs_8h_1ae032f18edd69bf6ba935ef9feb025a96" kindref="member">AI_NO_EXCEPT</ref></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structai_memory_info_1a32817d13f0e280777e49769f8c46f168" kindref="member">textures</ref>(0),</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_memory_info_1a08b2ccd0cef8dec36e47fc1beeb168f1" kindref="member">materials</ref>(0),</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_memory_info_1ac24ed2b3c141f043765b6e34783d1e24" kindref="member">meshes</ref>(0),</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_memory_info_1a5a084942c81a29f7bb03c9903430b033" kindref="member">nodes</ref>(0),</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_memory_info_1af82394dc3a17a644061ed647817efa68" kindref="member">animations</ref>(0),</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_memory_info_1a3ddd36d7eabcf989ab72cda2dd3ff015" kindref="member">cameras</ref>(0),</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_memory_info_1afcd2ccdfab49e2fce989413a362b8d35" kindref="member">lights</ref>(0),</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structai_memory_info_1a590739a4cef4876901d1cf6ff48f01b3" kindref="member">total</ref>(0)<sp/>{}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structai_memory_info_1a32817d13f0e280777e49769f8c46f168" kindref="member">textures</ref>;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structai_memory_info_1a08b2ccd0cef8dec36e47fc1beeb168f1" kindref="member">materials</ref>;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structai_memory_info_1ac24ed2b3c141f043765b6e34783d1e24" kindref="member">meshes</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structai_memory_info_1a5a084942c81a29f7bb03c9903430b033" kindref="member">nodes</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structai_memory_info_1af82394dc3a17a644061ed647817efa68" kindref="member">animations</ref>;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structai_memory_info_1a3ddd36d7eabcf989ab72cda2dd3ff015" kindref="member">cameras</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structai_memory_info_1afcd2ccdfab49e2fce989413a362b8d35" kindref="member">lights</ref>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structai_memory_info_1a590739a4cef4876901d1cf6ff48f01b3" kindref="member">total</ref>;</highlight></codeline>
<codeline lineno="524"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>!struct<sp/>aiMemoryInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>implementation<sp/>files</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vector2_8inl" kindref="compound">vector2.inl</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="vector3_8inl" kindref="compound">vector3.inl</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="color4_8inl" kindref="compound">color4.inl</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="matrix3x3_8inl" kindref="compound">matrix3x3.inl</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="matrix4x4_8inl" kindref="compound">matrix4x4.inl</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="quaternion_8inl" kindref="compound">quaternion.inl</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>AI_TYPES_H_INC</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/assimp/types.h"/>
  </compounddef>
</doxygen>
