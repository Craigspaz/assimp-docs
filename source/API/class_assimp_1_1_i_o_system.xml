<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_assimp_1_1_i_o_system" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>Assimp::IOSystem</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Intern::AllocateFromAssimpHeap</basecompoundref>
    <derivedcompoundref refid="class_assimp_1_1_blob_i_o_system" prot="public" virt="non-virtual">Assimp::BlobIOSystem</derivedcompoundref>
    <derivedcompoundref refid="class_assimp_1_1_default_i_o_system" prot="public" virt="non-virtual">Assimp::DefaultIOSystem</derivedcompoundref>
    <derivedcompoundref refid="class_assimp_1_1_memory_i_o_system" prot="public" virt="non-virtual">Assimp::MemoryIOSystem</derivedcompoundref>
    <derivedcompoundref refid="class_assimp_1_1_zip_archive_i_o_system" prot="public" virt="non-virtual">Assimp::ZipArchiveIOSystem</derivedcompoundref>
    <includes local="no">IOSystem.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_assimp_1_1_i_o_system_1a7cd62ef4bc3ef398b014e09f8c303226" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; Assimp::IOSystem::m_pathStack</definition>
        <argsstring></argsstring>
        <name>m_pathStack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="232" column="17" bodyfile="include/assimp/IOSystem.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a93e80760bd5d5239ba8eab3bd31efa6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>AI_FORCE_INLINE bool Assimp::IOSystem::ChangeDirectory</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>ChangeDirectory</name>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1aaa4197b3cfa45b6351e806f1ee4aa3ec">ChangeDirectory</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Will change the current directory to the given path. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The path to change to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True, when the directory has changed successfully. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="227" column="18" bodyfile="include/assimp/IOSystem.hpp" bodystart="337" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a8c334d60f04bceeb6bd0157d21723f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void Assimp::IOSystem::Close</definition>
        <argsstring>(IOStream *pFile)=0</argsstring>
        <name>Close</name>
        <reimplementedby refid="class_assimp_1_1_blob_i_o_system_1a626f7f153b4f5ac39adf38b6a539bedb">Close</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_default_i_o_system_1aa164cf18562082effde576752377bea3">Close</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1a33dedf49dab3b8d3dcb0aa944b6bd0c6">Close</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_zip_archive_i_o_system_1a134e61d232dfb82b0c21063dc0fbdff8">Close</reimplementedby>
        <param>
          <type><ref refid="class_assimp_1_1_i_o_stream" kindref="compound">IOStream</ref> *</type>
          <declname>pFile</declname>
        </param>
        <briefdescription>
<para>Closes the given file and releases all resources associated with it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>The file instance previously created by <ref refid="class_assimp_1_1_i_o_system_1ac512ece3b0701de5682553007a4c0816" kindref="member">Open()</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="162" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a670ddf0f9ea5c8ee05dce03a89259077" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool Assimp::IOSystem::ComparePaths</definition>
        <argsstring>(const char *one, const char *second) const</argsstring>
        <name>ComparePaths</name>
        <reimplementedby refid="class_assimp_1_1_default_i_o_system_1aebbe6ef57635f1b34fae766970ca00dc">ComparePaths</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1a72e850bf09960223104fb764d582243d">ComparePaths</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>one</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>Compares two paths and check whether the point to identical files. </para>
        </briefdescription>
        <detaileddescription>
<para>The dummy implementation of this virtual member performs a case-insensitive comparison of the given strings. The default IO system implementation uses OS mechanisms to convert relative into absolute paths, so the result can be trusted. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>one</parametername>
</parameternamelist>
<parameterdescription>
<para>First file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>Second file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the paths point to the same file. The file needn&apos;t be existing, however. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="177" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a26a040ad173f498f4ba71df498a61001" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>AI_FORCE_INLINE bool Assimp::IOSystem::ComparePaths</definition>
        <argsstring>(const std::string &amp;one, const std::string &amp;second) const</argsstring>
        <name>ComparePaths</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>one</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
<para>For backward compatibility. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>ComparePaths(const char*, const char*) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="184" column="17" bodyfile="include/assimp/IOSystem.hpp" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a3fc1316fdb4168cde052c95f96364d41" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>AI_FORCE_INLINE bool Assimp::IOSystem::CreateDirectory</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>CreateDirectory</name>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1af30fb865586c39232028fdd01911b5f0">CreateDirectory</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>CReates an new directory at the given path. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The path to create. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True, when a directory was created. False if the directory cannot be created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="220" column="18" bodyfile="include/assimp/IOSystem.hpp" bodystart="323" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a8885409acc1982ee4828c9ef27004642" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const std::string &amp;</type>
        <definition>AI_FORCE_INLINE const std::string &amp; Assimp::IOSystem::CurrentDirectory</definition>
        <argsstring>() const</argsstring>
        <name>CurrentDirectory</name>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1ac7830f026dcba355d539870d8f33a00b">CurrentDirectory</reimplementedby>
        <briefdescription>
<para>Returns the top directory from the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The directory on the top of the stack. Returns empty when no directory was pushed to the stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="199" column="31" bodyfile="include/assimp/IOSystem.hpp" bodystart="295" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1abdfad399fdbdc9bbf2ffd193f4107bf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>AI_FORCE_INLINE bool Assimp::IOSystem::DeleteFile</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>DeleteFile</name>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1a33ab4be233b42e36da124adb9d3b3a99">DeleteFile</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="229" column="18" bodyfile="include/assimp/IOSystem.hpp" bodystart="352" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a79f5fe8d2dbe1056c9418f7de9a72445" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool Assimp::IOSystem::Exists</definition>
        <argsstring>(const char *pFile) const =0</argsstring>
        <name>Exists</name>
        <reimplementedby refid="class_assimp_1_1_blob_i_o_system_1a326ffff0acf390d2ec3ae9af1509fc53">Exists</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_default_i_o_system_1a1f25fcf17ac1767b47222880c462154f">Exists</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1afd03643b1253dcfb8242193bf7678d3c">Exists</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_zip_archive_i_o_system_1a4a9c4014f6cd118fd2b4c14fe1285291">Exists</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>pFile</declname>
        </param>
        <briefdescription>
<para>Tests for the existence of a file at the given path. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if there is a file with this path, else false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="124" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a78821be348bf775ebfc9fdce07d622ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="defs_8h_1a61d239a320b58eca56bacc46fc2c79b8" kindref="member">AI_FORCE_INLINE</ref> bool</type>
        <definition>AI_FORCE_INLINE bool Assimp::IOSystem::Exists</definition>
        <argsstring>(const std::string &amp;pFile) const</argsstring>
        <name>Exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pFile</declname>
        </param>
        <briefdescription>
<para>For backward compatibility. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>Exists(const char*) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="116" column="26" bodyfile="include/assimp/IOSystem.hpp" bodystart="265" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a40e412875b985bdb638f00ef0f20fff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>char</type>
        <definition>virtual char Assimp::IOSystem::getOsSeparator</definition>
        <argsstring>() const =0</argsstring>
        <name>getOsSeparator</name>
        <reimplementedby refid="class_assimp_1_1_blob_i_o_system_1ac5598af9ee9b14a5ab06d81c19241277">getOsSeparator</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_default_i_o_system_1ae43cac8c1a6fba14322ee165a528a11d">getOsSeparator</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1a991692d1cd95855d4ab950d3976a0a6e">getOsSeparator</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_zip_archive_i_o_system_1a84647786480a0704ce0acaf891724e99">getOsSeparator</reimplementedby>
        <briefdescription>
<para>Returns the system specific directory separator. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>System specific directory separator </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="130" column="18"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a2c746aa09cc29cea1d2d6a5087bc6e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AI_FORCE_INLINE Assimp::IOSystem::IOSystem</definition>
        <argsstring>() AI_NO_EXCEPT</argsstring>
        <name>IOSystem</name>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>Create an instance of your derived class and assign it to an <ref refid="class_assimp_1_1_importer" kindref="compound">Assimp::Importer</ref> instance by calling <ref refid="class_assimp_1_1_importer_1a1161f46318af18bb86dfe0fc3edea4df" kindref="member">Importer::SetIOHandler()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="102" column="5" bodyfile="include/assimp/IOSystem.hpp" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1ac512ece3b0701de5682553007a4c0816" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="class_assimp_1_1_i_o_stream" kindref="compound">IOStream</ref> *</type>
        <definition>virtual IOStream* Assimp::IOSystem::Open</definition>
        <argsstring>(const char *pFile, const char *pMode=&quot;rb&quot;)=0</argsstring>
        <name>Open</name>
        <reimplementedby refid="class_assimp_1_1_blob_i_o_system_1a9245477f681ef86a4ac048b44ec109da">Open</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_default_i_o_system_1a9c8da3d63312f47b2dec83ec90aa2c4d">Open</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1a3c57622f084bc13ab45632ade926eea2">Open</reimplementedby>
        <reimplementedby refid="class_assimp_1_1_zip_archive_i_o_system_1a39fd6e16ee86ae197b4c0687644f785b">Open</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pMode</declname>
          <defval>&quot;rb&quot;</defval>
        </param>
        <briefdescription>
<para>Open a new file with a given path. </para>
        </briefdescription>
        <detaileddescription>
<para>When the access to the file is finished, call <ref refid="class_assimp_1_1_i_o_system_1a8c334d60f04bceeb6bd0157d21723f3e" kindref="member">Close()</ref> to release all associated resources (or the virtual dtor of the <ref refid="class_assimp_1_1_i_o_stream" kindref="compound">IOStream</ref>).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pFile</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to the file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pMode</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired file I/O mode. Required are: &quot;wb&quot;, &quot;w&quot;, &quot;wt&quot;, &quot;rb&quot;, &quot;r&quot;, &quot;rt&quot;.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>New <ref refid="class_assimp_1_1_i_o_stream" kindref="compound">IOStream</ref> interface allowing the lib to access the underlying file. </para>
</simplesect>
<simplesect kind="note"><para>When implementing this class to provide custom IO handling, you probably have to supply an own implementation of <ref refid="class_assimp_1_1_i_o_stream" kindref="compound">IOStream</ref> as well. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="147" column="22"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1aef35fabc9bd49fb83bfd4f12a94083c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_assimp_1_1_i_o_stream" kindref="compound">IOStream</ref> *</type>
        <definition>AI_FORCE_INLINE IOStream * Assimp::IOSystem::Open</definition>
        <argsstring>(const std::string &amp;pFile, const std::string &amp;pMode=std::string(&quot;rb&quot;))</argsstring>
        <name>Open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pFile</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>pMode</declname>
          <defval>std::string(&quot;rb&quot;)</defval>
        </param>
        <briefdescription>
<para>For backward compatibility. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_assimp_1_1_i_o_system_1ac512ece3b0701de5682553007a4c0816" kindref="member">Open(const char*, const char*)</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="154" column="21" bodyfile="include/assimp/IOSystem.hpp" bodystart="256" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1aa00f3ee1c44576364e8ce00206fb9dd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>AI_FORCE_INLINE bool Assimp::IOSystem::PopDirectory</definition>
        <argsstring>()</argsstring>
        <name>PopDirectory</name>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1a5244c63bc32ca3954e7b12c6ab468554">PopDirectory</reimplementedby>
        <briefdescription>
<para>Pops the top directory from the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True, when a directory was on the stack. False if no directory was on the stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="212" column="18" bodyfile="include/assimp/IOSystem.hpp" bodystart="311" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a07c2c93fac300df44c756174fcea71e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>AI_FORCE_INLINE bool Assimp::IOSystem::PushDirectory</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>PushDirectory</name>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1a88510dccda5de12d12e767415df3ec4a">PushDirectory</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Pushes a new directory onto the directory stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path to push onto the stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True, when push was successful, false if path is empty. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="192" column="18" bodyfile="include/assimp/IOSystem.hpp" bodystart="283" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a1f3180cefbb447b4b8c628dcaf95fc69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>size_t</type>
        <definition>AI_FORCE_INLINE size_t Assimp::IOSystem::StackSize</definition>
        <argsstring>() const</argsstring>
        <name>StackSize</name>
        <reimplementedby refid="class_assimp_1_1_memory_i_o_system_1ae78391f2a4e643eb7e228017caea5b78">StackSize</reimplementedby>
        <briefdescription>
<para>Returns the number of directories stored on the stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of directories of the stack. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="205" column="20" bodyfile="include/assimp/IOSystem.hpp" bodystart="305" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="class_assimp_1_1_i_o_system_1a617417f1c5125770606fea3b41068b36" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>AI_FORCE_INLINE Assimp::IOSystem::~IOSystem</definition>
        <argsstring>()</argsstring>
        <name>~IOSystem</name>
        <briefdescription>
<para>Virtual destructor. </para>
        </briefdescription>
        <detaileddescription>
<para>It is safe to be called from within DLL <ref refid="namespace_assimp" kindref="compound">Assimp</ref>, we&apos;re constructed on <ref refid="namespace_assimp" kindref="compound">Assimp</ref>&apos;s heap. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/IOSystem.hpp" line="110" column="13" bodyfile="include/assimp/IOSystem.hpp" bodystart="244" bodyend="246"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CPP-API: Interface to the file system. </para>
    </briefdescription>
    <detaileddescription>
<para>Derive an own implementation from this interface to supply custom file handling to the importer library. If you implement this interface, you also want to supply a custom implementation for <ref refid="class_assimp_1_1_i_o_stream" kindref="compound">IOStream</ref>.</para>
<para><simplesect kind="see"><para><ref refid="class_assimp_1_1_importer_1a1161f46318af18bb86dfe0fc3edea4df" kindref="member">Importer::SetIOHandler()</ref> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="4">
        <label>Assimp::MemoryIOSystem</label>
        <link refid="class_assimp_1_1_memory_i_o_system"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Assimp::BlobIOSystem</label>
        <link refid="class_assimp_1_1_blob_i_o_system"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>Assimp::ZipArchiveIOSystem</label>
        <link refid="class_assimp_1_1_zip_archive_i_o_system"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Assimp::IOSystem</label>
        <link refid="class_assimp_1_1_i_o_system"/>
      </node>
      <node id="3">
        <label>Assimp::DefaultIOSystem</label>
        <link refid="class_assimp_1_1_default_i_o_system"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="include/assimp/IOSystem.hpp" line="89" column="1" bodyfile="include/assimp/IOSystem.hpp" bodystart="93" bodyend="233"/>
    <listofallmembers>
      <member refid="class_assimp_1_1_i_o_system_1a93e80760bd5d5239ba8eab3bd31efa6b" prot="public" virt="virtual"><scope>Assimp::IOSystem</scope><name>ChangeDirectory</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a8c334d60f04bceeb6bd0157d21723f3e" prot="public" virt="pure-virtual"><scope>Assimp::IOSystem</scope><name>Close</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a670ddf0f9ea5c8ee05dce03a89259077" prot="public" virt="virtual"><scope>Assimp::IOSystem</scope><name>ComparePaths</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a26a040ad173f498f4ba71df498a61001" prot="public" virt="non-virtual"><scope>Assimp::IOSystem</scope><name>ComparePaths</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a3fc1316fdb4168cde052c95f96364d41" prot="public" virt="virtual"><scope>Assimp::IOSystem</scope><name>CreateDirectory</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a8885409acc1982ee4828c9ef27004642" prot="public" virt="virtual"><scope>Assimp::IOSystem</scope><name>CurrentDirectory</name></member>
      <member refid="class_assimp_1_1_i_o_system_1abdfad399fdbdc9bbf2ffd193f4107bf2" prot="public" virt="virtual"><scope>Assimp::IOSystem</scope><name>DeleteFile</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a78821be348bf775ebfc9fdce07d622ac" prot="public" virt="non-virtual"><scope>Assimp::IOSystem</scope><name>Exists</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a79f5fe8d2dbe1056c9418f7de9a72445" prot="public" virt="pure-virtual"><scope>Assimp::IOSystem</scope><name>Exists</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a40e412875b985bdb638f00ef0f20fff6" prot="public" virt="pure-virtual"><scope>Assimp::IOSystem</scope><name>getOsSeparator</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a2c746aa09cc29cea1d2d6a5087bc6e50" prot="public" virt="non-virtual"><scope>Assimp::IOSystem</scope><name>IOSystem</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a7cd62ef4bc3ef398b014e09f8c303226" prot="private" virt="non-virtual"><scope>Assimp::IOSystem</scope><name>m_pathStack</name></member>
      <member refid="class_assimp_1_1_i_o_system_1ac512ece3b0701de5682553007a4c0816" prot="public" virt="pure-virtual"><scope>Assimp::IOSystem</scope><name>Open</name></member>
      <member refid="class_assimp_1_1_i_o_system_1aef35fabc9bd49fb83bfd4f12a94083c3" prot="public" virt="non-virtual"><scope>Assimp::IOSystem</scope><name>Open</name></member>
      <member refid="class_assimp_1_1_i_o_system_1aa00f3ee1c44576364e8ce00206fb9dd2" prot="public" virt="virtual"><scope>Assimp::IOSystem</scope><name>PopDirectory</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a07c2c93fac300df44c756174fcea71e8" prot="public" virt="virtual"><scope>Assimp::IOSystem</scope><name>PushDirectory</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a1f3180cefbb447b4b8c628dcaf95fc69" prot="public" virt="virtual"><scope>Assimp::IOSystem</scope><name>StackSize</name></member>
      <member refid="class_assimp_1_1_i_o_system_1a617417f1c5125770606fea3b41068b36" prot="public" virt="virtual"><scope>Assimp::IOSystem</scope><name>~IOSystem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
