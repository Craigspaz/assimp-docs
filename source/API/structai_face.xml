<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structai_face" kind="struct" language="C++" prot="public">
    <compoundname>aiFace</compoundname>
    <derivedcompoundref refid="struct_assimp_1_1_l_w_o_1_1_face" prot="public" virt="non-virtual">Assimp::LWO::Face</derivedcompoundref>
    <includes local="no">mesh.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structai_face_1a2026b434c40cf1636f9f464a592ec36c" prot="public" static="no" mutable="no">
        <type>unsigned <ref refid="zlib_2contrib_2minizip_2ioapi_8h_1a787fa3cf048117ba7123753c1e74fcd6" kindref="member">int</ref> *</type>
        <definition>unsigned int* aiFace::mIndices</definition>
        <argsstring></argsstring>
        <name>mIndices</name>
        <briefdescription>
<para>Pointer to the indices array. Size of the array is given in numIndices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/mesh.h" line="142" column="1" bodyfile="include/assimp/mesh.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structai_face_1adda2698cec0ebfe651572f4a5701360b" prot="public" static="no" mutable="no">
        <type>unsigned <ref refid="zlib_2contrib_2minizip_2ioapi_8h_1a787fa3cf048117ba7123753c1e74fcd6" kindref="member">int</ref></type>
        <definition>unsigned int aiFace::mNumIndices</definition>
        <argsstring></argsstring>
        <name>mNumIndices</name>
        <briefdescription>
<para>Number of indices defining this face. </para>        </briefdescription>
        <detaileddescription>
<para>The maximum value for this member is <ref refid="include_2assimp_2mesh_8h_1a380f3ab069e89b3a1ed975577600438b" kindref="member">AI_MAX_FACE_INDICES</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/mesh.h" line="139" column="1" bodyfile="include/assimp/mesh.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structai_face_1a2591c15e2ce32bfac18298b9f309e0b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>aiFace::aiFace</definition>
        <argsstring>() AI_NO_EXCEPT</argsstring>
        <name>aiFace</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/mesh.h" line="147" column="1" bodyfile="include/assimp/mesh.h" bodystart="147" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="structai_face_1a096eb4f96e15861fe3c8299d5bee4c78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>aiFace::aiFace</definition>
        <argsstring>(const aiFace &amp;o)</argsstring>
        <name>aiFace</name>
        <param>
          <type>const <ref refid="structai_face" kindref="compound">aiFace</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Copy constructor. Copy the index array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/mesh.h" line="159" column="1" bodyfile="include/assimp/mesh.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structai_face_1a3543fa78ef3b738e4a42e1e982a82e8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool aiFace::operator!=</definition>
        <argsstring>(const aiFace &amp;o) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structai_face" kindref="compound">aiFace</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Inverse comparison operator. </para>        </briefdescription>
        <detaileddescription>
<para>Checks whether the index array of two faces is NOT identical </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/mesh.h" line="208" column="1" bodyfile="include/assimp/mesh.h" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structai_face_1ae775782ac91711eeedd77d54c0dcfdc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structai_face" kindref="compound">aiFace</ref> &amp;</type>
        <definition>aiFace&amp; aiFace::operator=</definition>
        <argsstring>(const aiFace &amp;o)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structai_face" kindref="compound">aiFace</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Assignment operator. Copy the index array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/mesh.h" line="165" column="1" bodyfile="include/assimp/mesh.h" bodystart="165" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structai_face_1ad573038b959a464dfb145a699fd93b77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool aiFace::operator==</definition>
        <argsstring>(const aiFace &amp;o) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structai_face" kindref="compound">aiFace</ref> &amp;</type>
          <declname>o</declname>
        </param>
        <briefdescription>
<para>Comparison operator. </para>        </briefdescription>
        <detaileddescription>
<para>Checks whether the index array of two faces is identical </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/mesh.h" line="184" column="1" bodyfile="include/assimp/mesh.h" bodystart="184" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="structai_face_1ae95d9898f19861a2b16ecc03603c3615" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>aiFace::~aiFace</definition>
        <argsstring>()</argsstring>
        <name>~aiFace</name>
        <briefdescription>
<para>Default destructor. Delete the index array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/assimp/mesh.h" line="154" column="1" bodyfile="include/assimp/mesh.h" bodystart="154" bodyend="156"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A single face in a mesh, referring to multiple vertices. </para>    </briefdescription>
    <detaileddescription>
<para>If mNumIndices is 3, we call the face &apos;triangle&apos;, for mNumIndices &gt; 3 it&apos;s called &apos;polygon&apos; (hey, that&apos;s just a definition!). <linebreak/>
 <ref refid="structai_mesh_1a99d66ac0a444068c1b252b30265cbf53" kindref="member">aiMesh::mPrimitiveTypes</ref> can be queried to quickly examine which types of primitive are actually present in a mesh. The <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410ab4484f73635d633cd79973bac1431ed6" kindref="member">aiProcess_SortByPType</ref> flag executes a special post-processing algorithm which splits meshes with <emphasis>different</emphasis> primitive types mixed up (e.g. lines and triangles) in several &apos;clean&apos; submeshes. Furthermore there is a configuration option ( <ref refid="config_8h_1a971e337cb0d526861142586b8341cb98" kindref="member">AI_CONFIG_PP_SBP_REMOVE</ref>) to force <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410ab4484f73635d633cd79973bac1431ed6" kindref="member">aiProcess_SortByPType</ref> to remove specific kinds of primitives from the imported scene, completely and forever. In many cases you&apos;ll probably want to set this setting to <programlisting><codeline><highlight class="normal">aiPrimitiveType_LINE|aiPrimitiveType_POINT</highlight></codeline>
</programlisting> Together with the <ref refid="postprocess_8h_1a64795260b95f5a4b3f3dc1be4f52e410a9c3de834f0307f31fa2b1b6d05dd592b" kindref="member">aiProcess_Triangulate</ref> flag you can then be sure that <ref refid="structai_face_1adda2698cec0ebfe651572f4a5701360b" kindref="member">aiFace::mNumIndices</ref> is always 3. <simplesect kind="note"><para>Take a look at the <ref refid="data" kindref="compound">Data Structures page </ref> for more information on the layout and winding order of a face. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="116">
        <label>Assimp::LWO::Face</label>
        <link refid="struct_assimp_1_1_l_w_o_1_1_face"/>
        <childnode refid="115" relation="public-inheritance">
        </childnode>
      </node>
      <node id="115">
        <label>aiFace</label>
        <link refid="structai_face"/>
      </node>
    </inheritancegraph>
    <location file="include/assimp/mesh.h" line="136" column="1" bodyfile="include/assimp/mesh.h" bodystart="136" bodyend="212"/>
    <listofallmembers>
      <member refid="structai_face_1a2591c15e2ce32bfac18298b9f309e0b6" prot="public" virt="non-virtual"><scope>aiFace</scope><name>aiFace</name></member>
      <member refid="structai_face_1a096eb4f96e15861fe3c8299d5bee4c78" prot="public" virt="non-virtual"><scope>aiFace</scope><name>aiFace</name></member>
      <member refid="structai_face_1a2026b434c40cf1636f9f464a592ec36c" prot="public" virt="non-virtual"><scope>aiFace</scope><name>mIndices</name></member>
      <member refid="structai_face_1adda2698cec0ebfe651572f4a5701360b" prot="public" virt="non-virtual"><scope>aiFace</scope><name>mNumIndices</name></member>
      <member refid="structai_face_1a3543fa78ef3b738e4a42e1e982a82e8b" prot="public" virt="non-virtual"><scope>aiFace</scope><name>operator!=</name></member>
      <member refid="structai_face_1ae775782ac91711eeedd77d54c0dcfdc9" prot="public" virt="non-virtual"><scope>aiFace</scope><name>operator=</name></member>
      <member refid="structai_face_1ad573038b959a464dfb145a699fd93b77" prot="public" virt="non-virtual"><scope>aiFace</scope><name>operator==</name></member>
      <member refid="structai_face_1ae95d9898f19861a2b16ecc03603c3615" prot="public" virt="non-virtual"><scope>aiFace</scope><name>~aiFace</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
